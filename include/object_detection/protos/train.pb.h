// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: object_detection/protos/train.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_object_5fdetection_2fprotos_2ftrain_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_object_5fdetection_2fprotos_2ftrain_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3018000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3018000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "object_detection/protos/optimizer.pb.h"
#include "object_detection/protos/preprocessor.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_object_5fdetection_2fprotos_2ftrain_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_object_5fdetection_2fprotos_2ftrain_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_object_5fdetection_2fprotos_2ftrain_2eproto;
namespace object_detection {
namespace protos {
class TrainConfig;
struct TrainConfigDefaultTypeInternal;
extern TrainConfigDefaultTypeInternal _TrainConfig_default_instance_;
}  // namespace protos
}  // namespace object_detection
PROTOBUF_NAMESPACE_OPEN
template<> ::object_detection::protos::TrainConfig* Arena::CreateMaybeMessage<::object_detection::protos::TrainConfig>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace object_detection {
namespace protos {

// ===================================================================

class TrainConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:object_detection.protos.TrainConfig) */ {
 public:
  inline TrainConfig() : TrainConfig(nullptr) {}
  ~TrainConfig() override;
  explicit constexpr TrainConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TrainConfig(const TrainConfig& from);
  TrainConfig(TrainConfig&& from) noexcept
    : TrainConfig() {
    *this = ::std::move(from);
  }

  inline TrainConfig& operator=(const TrainConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrainConfig& operator=(TrainConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TrainConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const TrainConfig* internal_default_instance() {
    return reinterpret_cast<const TrainConfig*>(
               &_TrainConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TrainConfig& a, TrainConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(TrainConfig* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TrainConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TrainConfig* New() const final {
    return new TrainConfig();
  }

  TrainConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TrainConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TrainConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TrainConfig& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrainConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "object_detection.protos.TrainConfig";
  }
  protected:
  explicit TrainConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataAugmentationOptionsFieldNumber = 2,
    kFreezeVariablesFieldNumber = 12,
    kUpdateTrainableVariablesFieldNumber = 25,
    kFineTuneCheckpointFieldNumber = 7,
    kFineTuneCheckpointTypeFieldNumber = 22,
    kOptimizerFieldNumber = 5,
    kGradientClippingByNormFieldNumber = 6,
    kNumStepsFieldNumber = 9,
    kBiasGradMultiplierFieldNumber = 11,
    kSyncReplicasFieldNumber = 3,
    kFromDetectionCheckpointFieldNumber = 8,
    kLoadAllDetectionCheckpointVarsFieldNumber = 19,
    kMergeMultipleLabelBoxesFieldNumber = 17,
    kUseMulticlassScoresFieldNumber = 24,
    kRetainOriginalImagesFieldNumber = 23,
    kUseBfloat16FieldNumber = 26,
    kSummarizeGradientsFieldNumber = 27,
    kMaxNumberOfBoxesFieldNumber = 20,
    kBatchSizeFieldNumber = 1,
    kKeepCheckpointEveryNHoursFieldNumber = 4,
    kStartupDelayStepsFieldNumber = 10,
    kReplicasToAggregateFieldNumber = 13,
    kBatchQueueCapacityFieldNumber = 14,
    kNumBatchQueueThreadsFieldNumber = 15,
    kPrefetchQueueCapacityFieldNumber = 16,
    kAddRegularizationLossFieldNumber = 18,
    kUnpadGroundtruthTensorsFieldNumber = 21,
  };
  // repeated .object_detection.protos.PreprocessingStep data_augmentation_options = 2;
  int data_augmentation_options_size() const;
  private:
  int _internal_data_augmentation_options_size() const;
  public:
  void clear_data_augmentation_options();
  ::object_detection::protos::PreprocessingStep* mutable_data_augmentation_options(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::object_detection::protos::PreprocessingStep >*
      mutable_data_augmentation_options();
  private:
  const ::object_detection::protos::PreprocessingStep& _internal_data_augmentation_options(int index) const;
  ::object_detection::protos::PreprocessingStep* _internal_add_data_augmentation_options();
  public:
  const ::object_detection::protos::PreprocessingStep& data_augmentation_options(int index) const;
  ::object_detection::protos::PreprocessingStep* add_data_augmentation_options();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::object_detection::protos::PreprocessingStep >&
      data_augmentation_options() const;

  // repeated string freeze_variables = 12;
  int freeze_variables_size() const;
  private:
  int _internal_freeze_variables_size() const;
  public:
  void clear_freeze_variables();
  const std::string& freeze_variables(int index) const;
  std::string* mutable_freeze_variables(int index);
  void set_freeze_variables(int index, const std::string& value);
  void set_freeze_variables(int index, std::string&& value);
  void set_freeze_variables(int index, const char* value);
  void set_freeze_variables(int index, const char* value, size_t size);
  std::string* add_freeze_variables();
  void add_freeze_variables(const std::string& value);
  void add_freeze_variables(std::string&& value);
  void add_freeze_variables(const char* value);
  void add_freeze_variables(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& freeze_variables() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_freeze_variables();
  private:
  const std::string& _internal_freeze_variables(int index) const;
  std::string* _internal_add_freeze_variables();
  public:

  // repeated string update_trainable_variables = 25;
  int update_trainable_variables_size() const;
  private:
  int _internal_update_trainable_variables_size() const;
  public:
  void clear_update_trainable_variables();
  const std::string& update_trainable_variables(int index) const;
  std::string* mutable_update_trainable_variables(int index);
  void set_update_trainable_variables(int index, const std::string& value);
  void set_update_trainable_variables(int index, std::string&& value);
  void set_update_trainable_variables(int index, const char* value);
  void set_update_trainable_variables(int index, const char* value, size_t size);
  std::string* add_update_trainable_variables();
  void add_update_trainable_variables(const std::string& value);
  void add_update_trainable_variables(std::string&& value);
  void add_update_trainable_variables(const char* value);
  void add_update_trainable_variables(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& update_trainable_variables() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_update_trainable_variables();
  private:
  const std::string& _internal_update_trainable_variables(int index) const;
  std::string* _internal_add_update_trainable_variables();
  public:

  // optional string fine_tune_checkpoint = 7 [default = ""];
  bool has_fine_tune_checkpoint() const;
  private:
  bool _internal_has_fine_tune_checkpoint() const;
  public:
  void clear_fine_tune_checkpoint();
  const std::string& fine_tune_checkpoint() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_fine_tune_checkpoint(ArgT0&& arg0, ArgT... args);
  std::string* mutable_fine_tune_checkpoint();
  PROTOBUF_MUST_USE_RESULT std::string* release_fine_tune_checkpoint();
  void set_allocated_fine_tune_checkpoint(std::string* fine_tune_checkpoint);
  private:
  const std::string& _internal_fine_tune_checkpoint() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_fine_tune_checkpoint(const std::string& value);
  std::string* _internal_mutable_fine_tune_checkpoint();
  public:

  // optional string fine_tune_checkpoint_type = 22 [default = ""];
  bool has_fine_tune_checkpoint_type() const;
  private:
  bool _internal_has_fine_tune_checkpoint_type() const;
  public:
  void clear_fine_tune_checkpoint_type();
  const std::string& fine_tune_checkpoint_type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_fine_tune_checkpoint_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_fine_tune_checkpoint_type();
  PROTOBUF_MUST_USE_RESULT std::string* release_fine_tune_checkpoint_type();
  void set_allocated_fine_tune_checkpoint_type(std::string* fine_tune_checkpoint_type);
  private:
  const std::string& _internal_fine_tune_checkpoint_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_fine_tune_checkpoint_type(const std::string& value);
  std::string* _internal_mutable_fine_tune_checkpoint_type();
  public:

  // optional .object_detection.protos.Optimizer optimizer = 5;
  bool has_optimizer() const;
  private:
  bool _internal_has_optimizer() const;
  public:
  void clear_optimizer();
  const ::object_detection::protos::Optimizer& optimizer() const;
  PROTOBUF_MUST_USE_RESULT ::object_detection::protos::Optimizer* release_optimizer();
  ::object_detection::protos::Optimizer* mutable_optimizer();
  void set_allocated_optimizer(::object_detection::protos::Optimizer* optimizer);
  private:
  const ::object_detection::protos::Optimizer& _internal_optimizer() const;
  ::object_detection::protos::Optimizer* _internal_mutable_optimizer();
  public:
  void unsafe_arena_set_allocated_optimizer(
      ::object_detection::protos::Optimizer* optimizer);
  ::object_detection::protos::Optimizer* unsafe_arena_release_optimizer();

  // optional float gradient_clipping_by_norm = 6 [default = 0];
  bool has_gradient_clipping_by_norm() const;
  private:
  bool _internal_has_gradient_clipping_by_norm() const;
  public:
  void clear_gradient_clipping_by_norm();
  float gradient_clipping_by_norm() const;
  void set_gradient_clipping_by_norm(float value);
  private:
  float _internal_gradient_clipping_by_norm() const;
  void _internal_set_gradient_clipping_by_norm(float value);
  public:

  // optional uint32 num_steps = 9 [default = 0];
  bool has_num_steps() const;
  private:
  bool _internal_has_num_steps() const;
  public:
  void clear_num_steps();
  ::PROTOBUF_NAMESPACE_ID::uint32 num_steps() const;
  void set_num_steps(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_num_steps() const;
  void _internal_set_num_steps(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional float bias_grad_multiplier = 11 [default = 0];
  bool has_bias_grad_multiplier() const;
  private:
  bool _internal_has_bias_grad_multiplier() const;
  public:
  void clear_bias_grad_multiplier();
  float bias_grad_multiplier() const;
  void set_bias_grad_multiplier(float value);
  private:
  float _internal_bias_grad_multiplier() const;
  void _internal_set_bias_grad_multiplier(float value);
  public:

  // optional bool sync_replicas = 3 [default = false];
  bool has_sync_replicas() const;
  private:
  bool _internal_has_sync_replicas() const;
  public:
  void clear_sync_replicas();
  bool sync_replicas() const;
  void set_sync_replicas(bool value);
  private:
  bool _internal_sync_replicas() const;
  void _internal_set_sync_replicas(bool value);
  public:

  // optional bool from_detection_checkpoint = 8 [default = false, deprecated = true];
  PROTOBUF_DEPRECATED bool has_from_detection_checkpoint() const;
  private:
  bool _internal_has_from_detection_checkpoint() const;
  public:
  PROTOBUF_DEPRECATED void clear_from_detection_checkpoint();
  PROTOBUF_DEPRECATED bool from_detection_checkpoint() const;
  PROTOBUF_DEPRECATED void set_from_detection_checkpoint(bool value);
  private:
  bool _internal_from_detection_checkpoint() const;
  void _internal_set_from_detection_checkpoint(bool value);
  public:

  // optional bool load_all_detection_checkpoint_vars = 19 [default = false];
  bool has_load_all_detection_checkpoint_vars() const;
  private:
  bool _internal_has_load_all_detection_checkpoint_vars() const;
  public:
  void clear_load_all_detection_checkpoint_vars();
  bool load_all_detection_checkpoint_vars() const;
  void set_load_all_detection_checkpoint_vars(bool value);
  private:
  bool _internal_load_all_detection_checkpoint_vars() const;
  void _internal_set_load_all_detection_checkpoint_vars(bool value);
  public:

  // optional bool merge_multiple_label_boxes = 17 [default = false];
  bool has_merge_multiple_label_boxes() const;
  private:
  bool _internal_has_merge_multiple_label_boxes() const;
  public:
  void clear_merge_multiple_label_boxes();
  bool merge_multiple_label_boxes() const;
  void set_merge_multiple_label_boxes(bool value);
  private:
  bool _internal_merge_multiple_label_boxes() const;
  void _internal_set_merge_multiple_label_boxes(bool value);
  public:

  // optional bool use_multiclass_scores = 24 [default = false];
  bool has_use_multiclass_scores() const;
  private:
  bool _internal_has_use_multiclass_scores() const;
  public:
  void clear_use_multiclass_scores();
  bool use_multiclass_scores() const;
  void set_use_multiclass_scores(bool value);
  private:
  bool _internal_use_multiclass_scores() const;
  void _internal_set_use_multiclass_scores(bool value);
  public:

  // optional bool retain_original_images = 23 [default = false];
  bool has_retain_original_images() const;
  private:
  bool _internal_has_retain_original_images() const;
  public:
  void clear_retain_original_images();
  bool retain_original_images() const;
  void set_retain_original_images(bool value);
  private:
  bool _internal_retain_original_images() const;
  void _internal_set_retain_original_images(bool value);
  public:

  // optional bool use_bfloat16 = 26 [default = false];
  bool has_use_bfloat16() const;
  private:
  bool _internal_has_use_bfloat16() const;
  public:
  void clear_use_bfloat16();
  bool use_bfloat16() const;
  void set_use_bfloat16(bool value);
  private:
  bool _internal_use_bfloat16() const;
  void _internal_set_use_bfloat16(bool value);
  public:

  // optional bool summarize_gradients = 27 [default = false];
  bool has_summarize_gradients() const;
  private:
  bool _internal_has_summarize_gradients() const;
  public:
  void clear_summarize_gradients();
  bool summarize_gradients() const;
  void set_summarize_gradients(bool value);
  private:
  bool _internal_summarize_gradients() const;
  void _internal_set_summarize_gradients(bool value);
  public:

  // optional int32 max_number_of_boxes = 20 [default = 100, deprecated = true];
  PROTOBUF_DEPRECATED bool has_max_number_of_boxes() const;
  private:
  bool _internal_has_max_number_of_boxes() const;
  public:
  PROTOBUF_DEPRECATED void clear_max_number_of_boxes();
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::int32 max_number_of_boxes() const;
  PROTOBUF_DEPRECATED void set_max_number_of_boxes(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_max_number_of_boxes() const;
  void _internal_set_max_number_of_boxes(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional uint32 batch_size = 1 [default = 32];
  bool has_batch_size() const;
  private:
  bool _internal_has_batch_size() const;
  public:
  void clear_batch_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 batch_size() const;
  void set_batch_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_batch_size() const;
  void _internal_set_batch_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional float keep_checkpoint_every_n_hours = 4 [default = 10000];
  bool has_keep_checkpoint_every_n_hours() const;
  private:
  bool _internal_has_keep_checkpoint_every_n_hours() const;
  public:
  void clear_keep_checkpoint_every_n_hours();
  float keep_checkpoint_every_n_hours() const;
  void set_keep_checkpoint_every_n_hours(float value);
  private:
  float _internal_keep_checkpoint_every_n_hours() const;
  void _internal_set_keep_checkpoint_every_n_hours(float value);
  public:

  // optional float startup_delay_steps = 10 [default = 15];
  bool has_startup_delay_steps() const;
  private:
  bool _internal_has_startup_delay_steps() const;
  public:
  void clear_startup_delay_steps();
  float startup_delay_steps() const;
  void set_startup_delay_steps(float value);
  private:
  float _internal_startup_delay_steps() const;
  void _internal_set_startup_delay_steps(float value);
  public:

  // optional int32 replicas_to_aggregate = 13 [default = 1];
  bool has_replicas_to_aggregate() const;
  private:
  bool _internal_has_replicas_to_aggregate() const;
  public:
  void clear_replicas_to_aggregate();
  ::PROTOBUF_NAMESPACE_ID::int32 replicas_to_aggregate() const;
  void set_replicas_to_aggregate(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_replicas_to_aggregate() const;
  void _internal_set_replicas_to_aggregate(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 batch_queue_capacity = 14 [default = 150, deprecated = true];
  PROTOBUF_DEPRECATED bool has_batch_queue_capacity() const;
  private:
  bool _internal_has_batch_queue_capacity() const;
  public:
  PROTOBUF_DEPRECATED void clear_batch_queue_capacity();
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::int32 batch_queue_capacity() const;
  PROTOBUF_DEPRECATED void set_batch_queue_capacity(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_batch_queue_capacity() const;
  void _internal_set_batch_queue_capacity(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 num_batch_queue_threads = 15 [default = 8, deprecated = true];
  PROTOBUF_DEPRECATED bool has_num_batch_queue_threads() const;
  private:
  bool _internal_has_num_batch_queue_threads() const;
  public:
  PROTOBUF_DEPRECATED void clear_num_batch_queue_threads();
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::int32 num_batch_queue_threads() const;
  PROTOBUF_DEPRECATED void set_num_batch_queue_threads(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_num_batch_queue_threads() const;
  void _internal_set_num_batch_queue_threads(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 prefetch_queue_capacity = 16 [default = 5, deprecated = true];
  PROTOBUF_DEPRECATED bool has_prefetch_queue_capacity() const;
  private:
  bool _internal_has_prefetch_queue_capacity() const;
  public:
  PROTOBUF_DEPRECATED void clear_prefetch_queue_capacity();
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::int32 prefetch_queue_capacity() const;
  PROTOBUF_DEPRECATED void set_prefetch_queue_capacity(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_prefetch_queue_capacity() const;
  void _internal_set_prefetch_queue_capacity(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional bool add_regularization_loss = 18 [default = true];
  bool has_add_regularization_loss() const;
  private:
  bool _internal_has_add_regularization_loss() const;
  public:
  void clear_add_regularization_loss();
  bool add_regularization_loss() const;
  void set_add_regularization_loss(bool value);
  private:
  bool _internal_add_regularization_loss() const;
  void _internal_set_add_regularization_loss(bool value);
  public:

  // optional bool unpad_groundtruth_tensors = 21 [default = true];
  bool has_unpad_groundtruth_tensors() const;
  private:
  bool _internal_has_unpad_groundtruth_tensors() const;
  public:
  void clear_unpad_groundtruth_tensors();
  bool unpad_groundtruth_tensors() const;
  void set_unpad_groundtruth_tensors(bool value);
  private:
  bool _internal_unpad_groundtruth_tensors() const;
  void _internal_set_unpad_groundtruth_tensors(bool value);
  public:

  // @@protoc_insertion_point(class_scope:object_detection.protos.TrainConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::object_detection::protos::PreprocessingStep > data_augmentation_options_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> freeze_variables_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> update_trainable_variables_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fine_tune_checkpoint_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fine_tune_checkpoint_type_;
  ::object_detection::protos::Optimizer* optimizer_;
  float gradient_clipping_by_norm_;
  ::PROTOBUF_NAMESPACE_ID::uint32 num_steps_;
  float bias_grad_multiplier_;
  bool sync_replicas_;
  bool from_detection_checkpoint_;
  bool load_all_detection_checkpoint_vars_;
  bool merge_multiple_label_boxes_;
  bool use_multiclass_scores_;
  bool retain_original_images_;
  bool use_bfloat16_;
  bool summarize_gradients_;
  ::PROTOBUF_NAMESPACE_ID::int32 max_number_of_boxes_;
  ::PROTOBUF_NAMESPACE_ID::uint32 batch_size_;
  float keep_checkpoint_every_n_hours_;
  float startup_delay_steps_;
  ::PROTOBUF_NAMESPACE_ID::int32 replicas_to_aggregate_;
  ::PROTOBUF_NAMESPACE_ID::int32 batch_queue_capacity_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_batch_queue_threads_;
  ::PROTOBUF_NAMESPACE_ID::int32 prefetch_queue_capacity_;
  bool add_regularization_loss_;
  bool unpad_groundtruth_tensors_;
  friend struct ::TableStruct_object_5fdetection_2fprotos_2ftrain_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TrainConfig

// optional uint32 batch_size = 1 [default = 32];
inline bool TrainConfig::_internal_has_batch_size() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool TrainConfig::has_batch_size() const {
  return _internal_has_batch_size();
}
inline void TrainConfig::clear_batch_size() {
  batch_size_ = 32u;
  _has_bits_[0] &= ~0x00008000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TrainConfig::_internal_batch_size() const {
  return batch_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TrainConfig::batch_size() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.TrainConfig.batch_size)
  return _internal_batch_size();
}
inline void TrainConfig::_internal_set_batch_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00008000u;
  batch_size_ = value;
}
inline void TrainConfig::set_batch_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_batch_size(value);
  // @@protoc_insertion_point(field_set:object_detection.protos.TrainConfig.batch_size)
}

// repeated .object_detection.protos.PreprocessingStep data_augmentation_options = 2;
inline int TrainConfig::_internal_data_augmentation_options_size() const {
  return data_augmentation_options_.size();
}
inline int TrainConfig::data_augmentation_options_size() const {
  return _internal_data_augmentation_options_size();
}
inline ::object_detection::protos::PreprocessingStep* TrainConfig::mutable_data_augmentation_options(int index) {
  // @@protoc_insertion_point(field_mutable:object_detection.protos.TrainConfig.data_augmentation_options)
  return data_augmentation_options_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::object_detection::protos::PreprocessingStep >*
TrainConfig::mutable_data_augmentation_options() {
  // @@protoc_insertion_point(field_mutable_list:object_detection.protos.TrainConfig.data_augmentation_options)
  return &data_augmentation_options_;
}
inline const ::object_detection::protos::PreprocessingStep& TrainConfig::_internal_data_augmentation_options(int index) const {
  return data_augmentation_options_.Get(index);
}
inline const ::object_detection::protos::PreprocessingStep& TrainConfig::data_augmentation_options(int index) const {
  // @@protoc_insertion_point(field_get:object_detection.protos.TrainConfig.data_augmentation_options)
  return _internal_data_augmentation_options(index);
}
inline ::object_detection::protos::PreprocessingStep* TrainConfig::_internal_add_data_augmentation_options() {
  return data_augmentation_options_.Add();
}
inline ::object_detection::protos::PreprocessingStep* TrainConfig::add_data_augmentation_options() {
  ::object_detection::protos::PreprocessingStep* _add = _internal_add_data_augmentation_options();
  // @@protoc_insertion_point(field_add:object_detection.protos.TrainConfig.data_augmentation_options)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::object_detection::protos::PreprocessingStep >&
TrainConfig::data_augmentation_options() const {
  // @@protoc_insertion_point(field_list:object_detection.protos.TrainConfig.data_augmentation_options)
  return data_augmentation_options_;
}

// optional bool sync_replicas = 3 [default = false];
inline bool TrainConfig::_internal_has_sync_replicas() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool TrainConfig::has_sync_replicas() const {
  return _internal_has_sync_replicas();
}
inline void TrainConfig::clear_sync_replicas() {
  sync_replicas_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool TrainConfig::_internal_sync_replicas() const {
  return sync_replicas_;
}
inline bool TrainConfig::sync_replicas() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.TrainConfig.sync_replicas)
  return _internal_sync_replicas();
}
inline void TrainConfig::_internal_set_sync_replicas(bool value) {
  _has_bits_[0] |= 0x00000040u;
  sync_replicas_ = value;
}
inline void TrainConfig::set_sync_replicas(bool value) {
  _internal_set_sync_replicas(value);
  // @@protoc_insertion_point(field_set:object_detection.protos.TrainConfig.sync_replicas)
}

// optional float keep_checkpoint_every_n_hours = 4 [default = 10000];
inline bool TrainConfig::_internal_has_keep_checkpoint_every_n_hours() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool TrainConfig::has_keep_checkpoint_every_n_hours() const {
  return _internal_has_keep_checkpoint_every_n_hours();
}
inline void TrainConfig::clear_keep_checkpoint_every_n_hours() {
  keep_checkpoint_every_n_hours_ = 10000;
  _has_bits_[0] &= ~0x00010000u;
}
inline float TrainConfig::_internal_keep_checkpoint_every_n_hours() const {
  return keep_checkpoint_every_n_hours_;
}
inline float TrainConfig::keep_checkpoint_every_n_hours() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.TrainConfig.keep_checkpoint_every_n_hours)
  return _internal_keep_checkpoint_every_n_hours();
}
inline void TrainConfig::_internal_set_keep_checkpoint_every_n_hours(float value) {
  _has_bits_[0] |= 0x00010000u;
  keep_checkpoint_every_n_hours_ = value;
}
inline void TrainConfig::set_keep_checkpoint_every_n_hours(float value) {
  _internal_set_keep_checkpoint_every_n_hours(value);
  // @@protoc_insertion_point(field_set:object_detection.protos.TrainConfig.keep_checkpoint_every_n_hours)
}

// optional .object_detection.protos.Optimizer optimizer = 5;
inline bool TrainConfig::_internal_has_optimizer() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || optimizer_ != nullptr);
  return value;
}
inline bool TrainConfig::has_optimizer() const {
  return _internal_has_optimizer();
}
inline const ::object_detection::protos::Optimizer& TrainConfig::_internal_optimizer() const {
  const ::object_detection::protos::Optimizer* p = optimizer_;
  return p != nullptr ? *p : reinterpret_cast<const ::object_detection::protos::Optimizer&>(
      ::object_detection::protos::_Optimizer_default_instance_);
}
inline const ::object_detection::protos::Optimizer& TrainConfig::optimizer() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.TrainConfig.optimizer)
  return _internal_optimizer();
}
inline void TrainConfig::unsafe_arena_set_allocated_optimizer(
    ::object_detection::protos::Optimizer* optimizer) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(optimizer_);
  }
  optimizer_ = optimizer;
  if (optimizer) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:object_detection.protos.TrainConfig.optimizer)
}
inline ::object_detection::protos::Optimizer* TrainConfig::release_optimizer() {
  _has_bits_[0] &= ~0x00000004u;
  ::object_detection::protos::Optimizer* temp = optimizer_;
  optimizer_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::object_detection::protos::Optimizer* TrainConfig::unsafe_arena_release_optimizer() {
  // @@protoc_insertion_point(field_release:object_detection.protos.TrainConfig.optimizer)
  _has_bits_[0] &= ~0x00000004u;
  ::object_detection::protos::Optimizer* temp = optimizer_;
  optimizer_ = nullptr;
  return temp;
}
inline ::object_detection::protos::Optimizer* TrainConfig::_internal_mutable_optimizer() {
  _has_bits_[0] |= 0x00000004u;
  if (optimizer_ == nullptr) {
    auto* p = CreateMaybeMessage<::object_detection::protos::Optimizer>(GetArenaForAllocation());
    optimizer_ = p;
  }
  return optimizer_;
}
inline ::object_detection::protos::Optimizer* TrainConfig::mutable_optimizer() {
  ::object_detection::protos::Optimizer* _msg = _internal_mutable_optimizer();
  // @@protoc_insertion_point(field_mutable:object_detection.protos.TrainConfig.optimizer)
  return _msg;
}
inline void TrainConfig::set_allocated_optimizer(::object_detection::protos::Optimizer* optimizer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(optimizer_);
  }
  if (optimizer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(optimizer));
    if (message_arena != submessage_arena) {
      optimizer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, optimizer, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  optimizer_ = optimizer;
  // @@protoc_insertion_point(field_set_allocated:object_detection.protos.TrainConfig.optimizer)
}

// optional float gradient_clipping_by_norm = 6 [default = 0];
inline bool TrainConfig::_internal_has_gradient_clipping_by_norm() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool TrainConfig::has_gradient_clipping_by_norm() const {
  return _internal_has_gradient_clipping_by_norm();
}
inline void TrainConfig::clear_gradient_clipping_by_norm() {
  gradient_clipping_by_norm_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float TrainConfig::_internal_gradient_clipping_by_norm() const {
  return gradient_clipping_by_norm_;
}
inline float TrainConfig::gradient_clipping_by_norm() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.TrainConfig.gradient_clipping_by_norm)
  return _internal_gradient_clipping_by_norm();
}
inline void TrainConfig::_internal_set_gradient_clipping_by_norm(float value) {
  _has_bits_[0] |= 0x00000008u;
  gradient_clipping_by_norm_ = value;
}
inline void TrainConfig::set_gradient_clipping_by_norm(float value) {
  _internal_set_gradient_clipping_by_norm(value);
  // @@protoc_insertion_point(field_set:object_detection.protos.TrainConfig.gradient_clipping_by_norm)
}

// optional string fine_tune_checkpoint = 7 [default = ""];
inline bool TrainConfig::_internal_has_fine_tune_checkpoint() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TrainConfig::has_fine_tune_checkpoint() const {
  return _internal_has_fine_tune_checkpoint();
}
inline void TrainConfig::clear_fine_tune_checkpoint() {
  fine_tune_checkpoint_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TrainConfig::fine_tune_checkpoint() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.TrainConfig.fine_tune_checkpoint)
  return _internal_fine_tune_checkpoint();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TrainConfig::set_fine_tune_checkpoint(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 fine_tune_checkpoint_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:object_detection.protos.TrainConfig.fine_tune_checkpoint)
}
inline std::string* TrainConfig::mutable_fine_tune_checkpoint() {
  std::string* _s = _internal_mutable_fine_tune_checkpoint();
  // @@protoc_insertion_point(field_mutable:object_detection.protos.TrainConfig.fine_tune_checkpoint)
  return _s;
}
inline const std::string& TrainConfig::_internal_fine_tune_checkpoint() const {
  return fine_tune_checkpoint_.Get();
}
inline void TrainConfig::_internal_set_fine_tune_checkpoint(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  fine_tune_checkpoint_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TrainConfig::_internal_mutable_fine_tune_checkpoint() {
  _has_bits_[0] |= 0x00000001u;
  return fine_tune_checkpoint_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TrainConfig::release_fine_tune_checkpoint() {
  // @@protoc_insertion_point(field_release:object_detection.protos.TrainConfig.fine_tune_checkpoint)
  if (!_internal_has_fine_tune_checkpoint()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return fine_tune_checkpoint_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TrainConfig::set_allocated_fine_tune_checkpoint(std::string* fine_tune_checkpoint) {
  if (fine_tune_checkpoint != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  fine_tune_checkpoint_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), fine_tune_checkpoint,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:object_detection.protos.TrainConfig.fine_tune_checkpoint)
}

// optional string fine_tune_checkpoint_type = 22 [default = ""];
inline bool TrainConfig::_internal_has_fine_tune_checkpoint_type() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TrainConfig::has_fine_tune_checkpoint_type() const {
  return _internal_has_fine_tune_checkpoint_type();
}
inline void TrainConfig::clear_fine_tune_checkpoint_type() {
  fine_tune_checkpoint_type_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& TrainConfig::fine_tune_checkpoint_type() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.TrainConfig.fine_tune_checkpoint_type)
  return _internal_fine_tune_checkpoint_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TrainConfig::set_fine_tune_checkpoint_type(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 fine_tune_checkpoint_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:object_detection.protos.TrainConfig.fine_tune_checkpoint_type)
}
inline std::string* TrainConfig::mutable_fine_tune_checkpoint_type() {
  std::string* _s = _internal_mutable_fine_tune_checkpoint_type();
  // @@protoc_insertion_point(field_mutable:object_detection.protos.TrainConfig.fine_tune_checkpoint_type)
  return _s;
}
inline const std::string& TrainConfig::_internal_fine_tune_checkpoint_type() const {
  return fine_tune_checkpoint_type_.Get();
}
inline void TrainConfig::_internal_set_fine_tune_checkpoint_type(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  fine_tune_checkpoint_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TrainConfig::_internal_mutable_fine_tune_checkpoint_type() {
  _has_bits_[0] |= 0x00000002u;
  return fine_tune_checkpoint_type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TrainConfig::release_fine_tune_checkpoint_type() {
  // @@protoc_insertion_point(field_release:object_detection.protos.TrainConfig.fine_tune_checkpoint_type)
  if (!_internal_has_fine_tune_checkpoint_type()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return fine_tune_checkpoint_type_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TrainConfig::set_allocated_fine_tune_checkpoint_type(std::string* fine_tune_checkpoint_type) {
  if (fine_tune_checkpoint_type != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  fine_tune_checkpoint_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), fine_tune_checkpoint_type,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:object_detection.protos.TrainConfig.fine_tune_checkpoint_type)
}

// optional bool from_detection_checkpoint = 8 [default = false, deprecated = true];
inline bool TrainConfig::_internal_has_from_detection_checkpoint() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool TrainConfig::has_from_detection_checkpoint() const {
  return _internal_has_from_detection_checkpoint();
}
inline void TrainConfig::clear_from_detection_checkpoint() {
  from_detection_checkpoint_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool TrainConfig::_internal_from_detection_checkpoint() const {
  return from_detection_checkpoint_;
}
inline bool TrainConfig::from_detection_checkpoint() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.TrainConfig.from_detection_checkpoint)
  return _internal_from_detection_checkpoint();
}
inline void TrainConfig::_internal_set_from_detection_checkpoint(bool value) {
  _has_bits_[0] |= 0x00000080u;
  from_detection_checkpoint_ = value;
}
inline void TrainConfig::set_from_detection_checkpoint(bool value) {
  _internal_set_from_detection_checkpoint(value);
  // @@protoc_insertion_point(field_set:object_detection.protos.TrainConfig.from_detection_checkpoint)
}

// optional bool load_all_detection_checkpoint_vars = 19 [default = false];
inline bool TrainConfig::_internal_has_load_all_detection_checkpoint_vars() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool TrainConfig::has_load_all_detection_checkpoint_vars() const {
  return _internal_has_load_all_detection_checkpoint_vars();
}
inline void TrainConfig::clear_load_all_detection_checkpoint_vars() {
  load_all_detection_checkpoint_vars_ = false;
  _has_bits_[0] &= ~0x00000100u;
}
inline bool TrainConfig::_internal_load_all_detection_checkpoint_vars() const {
  return load_all_detection_checkpoint_vars_;
}
inline bool TrainConfig::load_all_detection_checkpoint_vars() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.TrainConfig.load_all_detection_checkpoint_vars)
  return _internal_load_all_detection_checkpoint_vars();
}
inline void TrainConfig::_internal_set_load_all_detection_checkpoint_vars(bool value) {
  _has_bits_[0] |= 0x00000100u;
  load_all_detection_checkpoint_vars_ = value;
}
inline void TrainConfig::set_load_all_detection_checkpoint_vars(bool value) {
  _internal_set_load_all_detection_checkpoint_vars(value);
  // @@protoc_insertion_point(field_set:object_detection.protos.TrainConfig.load_all_detection_checkpoint_vars)
}

// optional uint32 num_steps = 9 [default = 0];
inline bool TrainConfig::_internal_has_num_steps() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool TrainConfig::has_num_steps() const {
  return _internal_has_num_steps();
}
inline void TrainConfig::clear_num_steps() {
  num_steps_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TrainConfig::_internal_num_steps() const {
  return num_steps_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TrainConfig::num_steps() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.TrainConfig.num_steps)
  return _internal_num_steps();
}
inline void TrainConfig::_internal_set_num_steps(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  num_steps_ = value;
}
inline void TrainConfig::set_num_steps(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_num_steps(value);
  // @@protoc_insertion_point(field_set:object_detection.protos.TrainConfig.num_steps)
}

// optional float startup_delay_steps = 10 [default = 15];
inline bool TrainConfig::_internal_has_startup_delay_steps() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool TrainConfig::has_startup_delay_steps() const {
  return _internal_has_startup_delay_steps();
}
inline void TrainConfig::clear_startup_delay_steps() {
  startup_delay_steps_ = 15;
  _has_bits_[0] &= ~0x00020000u;
}
inline float TrainConfig::_internal_startup_delay_steps() const {
  return startup_delay_steps_;
}
inline float TrainConfig::startup_delay_steps() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.TrainConfig.startup_delay_steps)
  return _internal_startup_delay_steps();
}
inline void TrainConfig::_internal_set_startup_delay_steps(float value) {
  _has_bits_[0] |= 0x00020000u;
  startup_delay_steps_ = value;
}
inline void TrainConfig::set_startup_delay_steps(float value) {
  _internal_set_startup_delay_steps(value);
  // @@protoc_insertion_point(field_set:object_detection.protos.TrainConfig.startup_delay_steps)
}

// optional float bias_grad_multiplier = 11 [default = 0];
inline bool TrainConfig::_internal_has_bias_grad_multiplier() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool TrainConfig::has_bias_grad_multiplier() const {
  return _internal_has_bias_grad_multiplier();
}
inline void TrainConfig::clear_bias_grad_multiplier() {
  bias_grad_multiplier_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline float TrainConfig::_internal_bias_grad_multiplier() const {
  return bias_grad_multiplier_;
}
inline float TrainConfig::bias_grad_multiplier() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.TrainConfig.bias_grad_multiplier)
  return _internal_bias_grad_multiplier();
}
inline void TrainConfig::_internal_set_bias_grad_multiplier(float value) {
  _has_bits_[0] |= 0x00000020u;
  bias_grad_multiplier_ = value;
}
inline void TrainConfig::set_bias_grad_multiplier(float value) {
  _internal_set_bias_grad_multiplier(value);
  // @@protoc_insertion_point(field_set:object_detection.protos.TrainConfig.bias_grad_multiplier)
}

// repeated string update_trainable_variables = 25;
inline int TrainConfig::_internal_update_trainable_variables_size() const {
  return update_trainable_variables_.size();
}
inline int TrainConfig::update_trainable_variables_size() const {
  return _internal_update_trainable_variables_size();
}
inline void TrainConfig::clear_update_trainable_variables() {
  update_trainable_variables_.Clear();
}
inline std::string* TrainConfig::add_update_trainable_variables() {
  std::string* _s = _internal_add_update_trainable_variables();
  // @@protoc_insertion_point(field_add_mutable:object_detection.protos.TrainConfig.update_trainable_variables)
  return _s;
}
inline const std::string& TrainConfig::_internal_update_trainable_variables(int index) const {
  return update_trainable_variables_.Get(index);
}
inline const std::string& TrainConfig::update_trainable_variables(int index) const {
  // @@protoc_insertion_point(field_get:object_detection.protos.TrainConfig.update_trainable_variables)
  return _internal_update_trainable_variables(index);
}
inline std::string* TrainConfig::mutable_update_trainable_variables(int index) {
  // @@protoc_insertion_point(field_mutable:object_detection.protos.TrainConfig.update_trainable_variables)
  return update_trainable_variables_.Mutable(index);
}
inline void TrainConfig::set_update_trainable_variables(int index, const std::string& value) {
  update_trainable_variables_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:object_detection.protos.TrainConfig.update_trainable_variables)
}
inline void TrainConfig::set_update_trainable_variables(int index, std::string&& value) {
  update_trainable_variables_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:object_detection.protos.TrainConfig.update_trainable_variables)
}
inline void TrainConfig::set_update_trainable_variables(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  update_trainable_variables_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:object_detection.protos.TrainConfig.update_trainable_variables)
}
inline void TrainConfig::set_update_trainable_variables(int index, const char* value, size_t size) {
  update_trainable_variables_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:object_detection.protos.TrainConfig.update_trainable_variables)
}
inline std::string* TrainConfig::_internal_add_update_trainable_variables() {
  return update_trainable_variables_.Add();
}
inline void TrainConfig::add_update_trainable_variables(const std::string& value) {
  update_trainable_variables_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:object_detection.protos.TrainConfig.update_trainable_variables)
}
inline void TrainConfig::add_update_trainable_variables(std::string&& value) {
  update_trainable_variables_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:object_detection.protos.TrainConfig.update_trainable_variables)
}
inline void TrainConfig::add_update_trainable_variables(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  update_trainable_variables_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:object_detection.protos.TrainConfig.update_trainable_variables)
}
inline void TrainConfig::add_update_trainable_variables(const char* value, size_t size) {
  update_trainable_variables_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:object_detection.protos.TrainConfig.update_trainable_variables)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TrainConfig::update_trainable_variables() const {
  // @@protoc_insertion_point(field_list:object_detection.protos.TrainConfig.update_trainable_variables)
  return update_trainable_variables_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TrainConfig::mutable_update_trainable_variables() {
  // @@protoc_insertion_point(field_mutable_list:object_detection.protos.TrainConfig.update_trainable_variables)
  return &update_trainable_variables_;
}

// repeated string freeze_variables = 12;
inline int TrainConfig::_internal_freeze_variables_size() const {
  return freeze_variables_.size();
}
inline int TrainConfig::freeze_variables_size() const {
  return _internal_freeze_variables_size();
}
inline void TrainConfig::clear_freeze_variables() {
  freeze_variables_.Clear();
}
inline std::string* TrainConfig::add_freeze_variables() {
  std::string* _s = _internal_add_freeze_variables();
  // @@protoc_insertion_point(field_add_mutable:object_detection.protos.TrainConfig.freeze_variables)
  return _s;
}
inline const std::string& TrainConfig::_internal_freeze_variables(int index) const {
  return freeze_variables_.Get(index);
}
inline const std::string& TrainConfig::freeze_variables(int index) const {
  // @@protoc_insertion_point(field_get:object_detection.protos.TrainConfig.freeze_variables)
  return _internal_freeze_variables(index);
}
inline std::string* TrainConfig::mutable_freeze_variables(int index) {
  // @@protoc_insertion_point(field_mutable:object_detection.protos.TrainConfig.freeze_variables)
  return freeze_variables_.Mutable(index);
}
inline void TrainConfig::set_freeze_variables(int index, const std::string& value) {
  freeze_variables_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:object_detection.protos.TrainConfig.freeze_variables)
}
inline void TrainConfig::set_freeze_variables(int index, std::string&& value) {
  freeze_variables_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:object_detection.protos.TrainConfig.freeze_variables)
}
inline void TrainConfig::set_freeze_variables(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  freeze_variables_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:object_detection.protos.TrainConfig.freeze_variables)
}
inline void TrainConfig::set_freeze_variables(int index, const char* value, size_t size) {
  freeze_variables_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:object_detection.protos.TrainConfig.freeze_variables)
}
inline std::string* TrainConfig::_internal_add_freeze_variables() {
  return freeze_variables_.Add();
}
inline void TrainConfig::add_freeze_variables(const std::string& value) {
  freeze_variables_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:object_detection.protos.TrainConfig.freeze_variables)
}
inline void TrainConfig::add_freeze_variables(std::string&& value) {
  freeze_variables_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:object_detection.protos.TrainConfig.freeze_variables)
}
inline void TrainConfig::add_freeze_variables(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  freeze_variables_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:object_detection.protos.TrainConfig.freeze_variables)
}
inline void TrainConfig::add_freeze_variables(const char* value, size_t size) {
  freeze_variables_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:object_detection.protos.TrainConfig.freeze_variables)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TrainConfig::freeze_variables() const {
  // @@protoc_insertion_point(field_list:object_detection.protos.TrainConfig.freeze_variables)
  return freeze_variables_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TrainConfig::mutable_freeze_variables() {
  // @@protoc_insertion_point(field_mutable_list:object_detection.protos.TrainConfig.freeze_variables)
  return &freeze_variables_;
}

// optional int32 replicas_to_aggregate = 13 [default = 1];
inline bool TrainConfig::_internal_has_replicas_to_aggregate() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool TrainConfig::has_replicas_to_aggregate() const {
  return _internal_has_replicas_to_aggregate();
}
inline void TrainConfig::clear_replicas_to_aggregate() {
  replicas_to_aggregate_ = 1;
  _has_bits_[0] &= ~0x00040000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TrainConfig::_internal_replicas_to_aggregate() const {
  return replicas_to_aggregate_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TrainConfig::replicas_to_aggregate() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.TrainConfig.replicas_to_aggregate)
  return _internal_replicas_to_aggregate();
}
inline void TrainConfig::_internal_set_replicas_to_aggregate(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00040000u;
  replicas_to_aggregate_ = value;
}
inline void TrainConfig::set_replicas_to_aggregate(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_replicas_to_aggregate(value);
  // @@protoc_insertion_point(field_set:object_detection.protos.TrainConfig.replicas_to_aggregate)
}

// optional int32 batch_queue_capacity = 14 [default = 150, deprecated = true];
inline bool TrainConfig::_internal_has_batch_queue_capacity() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool TrainConfig::has_batch_queue_capacity() const {
  return _internal_has_batch_queue_capacity();
}
inline void TrainConfig::clear_batch_queue_capacity() {
  batch_queue_capacity_ = 150;
  _has_bits_[0] &= ~0x00080000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TrainConfig::_internal_batch_queue_capacity() const {
  return batch_queue_capacity_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TrainConfig::batch_queue_capacity() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.TrainConfig.batch_queue_capacity)
  return _internal_batch_queue_capacity();
}
inline void TrainConfig::_internal_set_batch_queue_capacity(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00080000u;
  batch_queue_capacity_ = value;
}
inline void TrainConfig::set_batch_queue_capacity(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_batch_queue_capacity(value);
  // @@protoc_insertion_point(field_set:object_detection.protos.TrainConfig.batch_queue_capacity)
}

// optional int32 num_batch_queue_threads = 15 [default = 8, deprecated = true];
inline bool TrainConfig::_internal_has_num_batch_queue_threads() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool TrainConfig::has_num_batch_queue_threads() const {
  return _internal_has_num_batch_queue_threads();
}
inline void TrainConfig::clear_num_batch_queue_threads() {
  num_batch_queue_threads_ = 8;
  _has_bits_[0] &= ~0x00100000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TrainConfig::_internal_num_batch_queue_threads() const {
  return num_batch_queue_threads_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TrainConfig::num_batch_queue_threads() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.TrainConfig.num_batch_queue_threads)
  return _internal_num_batch_queue_threads();
}
inline void TrainConfig::_internal_set_num_batch_queue_threads(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00100000u;
  num_batch_queue_threads_ = value;
}
inline void TrainConfig::set_num_batch_queue_threads(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_num_batch_queue_threads(value);
  // @@protoc_insertion_point(field_set:object_detection.protos.TrainConfig.num_batch_queue_threads)
}

// optional int32 prefetch_queue_capacity = 16 [default = 5, deprecated = true];
inline bool TrainConfig::_internal_has_prefetch_queue_capacity() const {
  bool value = (_has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool TrainConfig::has_prefetch_queue_capacity() const {
  return _internal_has_prefetch_queue_capacity();
}
inline void TrainConfig::clear_prefetch_queue_capacity() {
  prefetch_queue_capacity_ = 5;
  _has_bits_[0] &= ~0x00200000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TrainConfig::_internal_prefetch_queue_capacity() const {
  return prefetch_queue_capacity_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TrainConfig::prefetch_queue_capacity() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.TrainConfig.prefetch_queue_capacity)
  return _internal_prefetch_queue_capacity();
}
inline void TrainConfig::_internal_set_prefetch_queue_capacity(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00200000u;
  prefetch_queue_capacity_ = value;
}
inline void TrainConfig::set_prefetch_queue_capacity(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_prefetch_queue_capacity(value);
  // @@protoc_insertion_point(field_set:object_detection.protos.TrainConfig.prefetch_queue_capacity)
}

// optional bool merge_multiple_label_boxes = 17 [default = false];
inline bool TrainConfig::_internal_has_merge_multiple_label_boxes() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool TrainConfig::has_merge_multiple_label_boxes() const {
  return _internal_has_merge_multiple_label_boxes();
}
inline void TrainConfig::clear_merge_multiple_label_boxes() {
  merge_multiple_label_boxes_ = false;
  _has_bits_[0] &= ~0x00000200u;
}
inline bool TrainConfig::_internal_merge_multiple_label_boxes() const {
  return merge_multiple_label_boxes_;
}
inline bool TrainConfig::merge_multiple_label_boxes() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.TrainConfig.merge_multiple_label_boxes)
  return _internal_merge_multiple_label_boxes();
}
inline void TrainConfig::_internal_set_merge_multiple_label_boxes(bool value) {
  _has_bits_[0] |= 0x00000200u;
  merge_multiple_label_boxes_ = value;
}
inline void TrainConfig::set_merge_multiple_label_boxes(bool value) {
  _internal_set_merge_multiple_label_boxes(value);
  // @@protoc_insertion_point(field_set:object_detection.protos.TrainConfig.merge_multiple_label_boxes)
}

// optional bool use_multiclass_scores = 24 [default = false];
inline bool TrainConfig::_internal_has_use_multiclass_scores() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool TrainConfig::has_use_multiclass_scores() const {
  return _internal_has_use_multiclass_scores();
}
inline void TrainConfig::clear_use_multiclass_scores() {
  use_multiclass_scores_ = false;
  _has_bits_[0] &= ~0x00000400u;
}
inline bool TrainConfig::_internal_use_multiclass_scores() const {
  return use_multiclass_scores_;
}
inline bool TrainConfig::use_multiclass_scores() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.TrainConfig.use_multiclass_scores)
  return _internal_use_multiclass_scores();
}
inline void TrainConfig::_internal_set_use_multiclass_scores(bool value) {
  _has_bits_[0] |= 0x00000400u;
  use_multiclass_scores_ = value;
}
inline void TrainConfig::set_use_multiclass_scores(bool value) {
  _internal_set_use_multiclass_scores(value);
  // @@protoc_insertion_point(field_set:object_detection.protos.TrainConfig.use_multiclass_scores)
}

// optional bool add_regularization_loss = 18 [default = true];
inline bool TrainConfig::_internal_has_add_regularization_loss() const {
  bool value = (_has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool TrainConfig::has_add_regularization_loss() const {
  return _internal_has_add_regularization_loss();
}
inline void TrainConfig::clear_add_regularization_loss() {
  add_regularization_loss_ = true;
  _has_bits_[0] &= ~0x00400000u;
}
inline bool TrainConfig::_internal_add_regularization_loss() const {
  return add_regularization_loss_;
}
inline bool TrainConfig::add_regularization_loss() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.TrainConfig.add_regularization_loss)
  return _internal_add_regularization_loss();
}
inline void TrainConfig::_internal_set_add_regularization_loss(bool value) {
  _has_bits_[0] |= 0x00400000u;
  add_regularization_loss_ = value;
}
inline void TrainConfig::set_add_regularization_loss(bool value) {
  _internal_set_add_regularization_loss(value);
  // @@protoc_insertion_point(field_set:object_detection.protos.TrainConfig.add_regularization_loss)
}

// optional int32 max_number_of_boxes = 20 [default = 100, deprecated = true];
inline bool TrainConfig::_internal_has_max_number_of_boxes() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool TrainConfig::has_max_number_of_boxes() const {
  return _internal_has_max_number_of_boxes();
}
inline void TrainConfig::clear_max_number_of_boxes() {
  max_number_of_boxes_ = 100;
  _has_bits_[0] &= ~0x00004000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TrainConfig::_internal_max_number_of_boxes() const {
  return max_number_of_boxes_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TrainConfig::max_number_of_boxes() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.TrainConfig.max_number_of_boxes)
  return _internal_max_number_of_boxes();
}
inline void TrainConfig::_internal_set_max_number_of_boxes(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00004000u;
  max_number_of_boxes_ = value;
}
inline void TrainConfig::set_max_number_of_boxes(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_max_number_of_boxes(value);
  // @@protoc_insertion_point(field_set:object_detection.protos.TrainConfig.max_number_of_boxes)
}

// optional bool unpad_groundtruth_tensors = 21 [default = true];
inline bool TrainConfig::_internal_has_unpad_groundtruth_tensors() const {
  bool value = (_has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline bool TrainConfig::has_unpad_groundtruth_tensors() const {
  return _internal_has_unpad_groundtruth_tensors();
}
inline void TrainConfig::clear_unpad_groundtruth_tensors() {
  unpad_groundtruth_tensors_ = true;
  _has_bits_[0] &= ~0x00800000u;
}
inline bool TrainConfig::_internal_unpad_groundtruth_tensors() const {
  return unpad_groundtruth_tensors_;
}
inline bool TrainConfig::unpad_groundtruth_tensors() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.TrainConfig.unpad_groundtruth_tensors)
  return _internal_unpad_groundtruth_tensors();
}
inline void TrainConfig::_internal_set_unpad_groundtruth_tensors(bool value) {
  _has_bits_[0] |= 0x00800000u;
  unpad_groundtruth_tensors_ = value;
}
inline void TrainConfig::set_unpad_groundtruth_tensors(bool value) {
  _internal_set_unpad_groundtruth_tensors(value);
  // @@protoc_insertion_point(field_set:object_detection.protos.TrainConfig.unpad_groundtruth_tensors)
}

// optional bool retain_original_images = 23 [default = false];
inline bool TrainConfig::_internal_has_retain_original_images() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool TrainConfig::has_retain_original_images() const {
  return _internal_has_retain_original_images();
}
inline void TrainConfig::clear_retain_original_images() {
  retain_original_images_ = false;
  _has_bits_[0] &= ~0x00000800u;
}
inline bool TrainConfig::_internal_retain_original_images() const {
  return retain_original_images_;
}
inline bool TrainConfig::retain_original_images() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.TrainConfig.retain_original_images)
  return _internal_retain_original_images();
}
inline void TrainConfig::_internal_set_retain_original_images(bool value) {
  _has_bits_[0] |= 0x00000800u;
  retain_original_images_ = value;
}
inline void TrainConfig::set_retain_original_images(bool value) {
  _internal_set_retain_original_images(value);
  // @@protoc_insertion_point(field_set:object_detection.protos.TrainConfig.retain_original_images)
}

// optional bool use_bfloat16 = 26 [default = false];
inline bool TrainConfig::_internal_has_use_bfloat16() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool TrainConfig::has_use_bfloat16() const {
  return _internal_has_use_bfloat16();
}
inline void TrainConfig::clear_use_bfloat16() {
  use_bfloat16_ = false;
  _has_bits_[0] &= ~0x00001000u;
}
inline bool TrainConfig::_internal_use_bfloat16() const {
  return use_bfloat16_;
}
inline bool TrainConfig::use_bfloat16() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.TrainConfig.use_bfloat16)
  return _internal_use_bfloat16();
}
inline void TrainConfig::_internal_set_use_bfloat16(bool value) {
  _has_bits_[0] |= 0x00001000u;
  use_bfloat16_ = value;
}
inline void TrainConfig::set_use_bfloat16(bool value) {
  _internal_set_use_bfloat16(value);
  // @@protoc_insertion_point(field_set:object_detection.protos.TrainConfig.use_bfloat16)
}

// optional bool summarize_gradients = 27 [default = false];
inline bool TrainConfig::_internal_has_summarize_gradients() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool TrainConfig::has_summarize_gradients() const {
  return _internal_has_summarize_gradients();
}
inline void TrainConfig::clear_summarize_gradients() {
  summarize_gradients_ = false;
  _has_bits_[0] &= ~0x00002000u;
}
inline bool TrainConfig::_internal_summarize_gradients() const {
  return summarize_gradients_;
}
inline bool TrainConfig::summarize_gradients() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.TrainConfig.summarize_gradients)
  return _internal_summarize_gradients();
}
inline void TrainConfig::_internal_set_summarize_gradients(bool value) {
  _has_bits_[0] |= 0x00002000u;
  summarize_gradients_ = value;
}
inline void TrainConfig::set_summarize_gradients(bool value) {
  _internal_set_summarize_gradients(value);
  // @@protoc_insertion_point(field_set:object_detection.protos.TrainConfig.summarize_gradients)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace protos
}  // namespace object_detection

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_object_5fdetection_2fprotos_2ftrain_2eproto
