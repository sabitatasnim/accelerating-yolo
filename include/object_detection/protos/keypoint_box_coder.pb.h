// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: object_detection/protos/keypoint_box_coder.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_object_5fdetection_2fprotos_2fkeypoint_5fbox_5fcoder_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_object_5fdetection_2fprotos_2fkeypoint_5fbox_5fcoder_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3018000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3018000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_object_5fdetection_2fprotos_2fkeypoint_5fbox_5fcoder_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_object_5fdetection_2fprotos_2fkeypoint_5fbox_5fcoder_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_object_5fdetection_2fprotos_2fkeypoint_5fbox_5fcoder_2eproto;
namespace object_detection {
namespace protos {
class KeypointBoxCoder;
struct KeypointBoxCoderDefaultTypeInternal;
extern KeypointBoxCoderDefaultTypeInternal _KeypointBoxCoder_default_instance_;
}  // namespace protos
}  // namespace object_detection
PROTOBUF_NAMESPACE_OPEN
template<> ::object_detection::protos::KeypointBoxCoder* Arena::CreateMaybeMessage<::object_detection::protos::KeypointBoxCoder>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace object_detection {
namespace protos {

// ===================================================================

class KeypointBoxCoder final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:object_detection.protos.KeypointBoxCoder) */ {
 public:
  inline KeypointBoxCoder() : KeypointBoxCoder(nullptr) {}
  ~KeypointBoxCoder() override;
  explicit constexpr KeypointBoxCoder(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  KeypointBoxCoder(const KeypointBoxCoder& from);
  KeypointBoxCoder(KeypointBoxCoder&& from) noexcept
    : KeypointBoxCoder() {
    *this = ::std::move(from);
  }

  inline KeypointBoxCoder& operator=(const KeypointBoxCoder& from) {
    CopyFrom(from);
    return *this;
  }
  inline KeypointBoxCoder& operator=(KeypointBoxCoder&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const KeypointBoxCoder& default_instance() {
    return *internal_default_instance();
  }
  static inline const KeypointBoxCoder* internal_default_instance() {
    return reinterpret_cast<const KeypointBoxCoder*>(
               &_KeypointBoxCoder_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(KeypointBoxCoder& a, KeypointBoxCoder& b) {
    a.Swap(&b);
  }
  inline void Swap(KeypointBoxCoder* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KeypointBoxCoder* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline KeypointBoxCoder* New() const final {
    return new KeypointBoxCoder();
  }

  KeypointBoxCoder* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<KeypointBoxCoder>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const KeypointBoxCoder& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const KeypointBoxCoder& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KeypointBoxCoder* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "object_detection.protos.KeypointBoxCoder";
  }
  protected:
  explicit KeypointBoxCoder(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNumKeypointsFieldNumber = 1,
    kYScaleFieldNumber = 2,
    kXScaleFieldNumber = 3,
    kHeightScaleFieldNumber = 4,
    kWidthScaleFieldNumber = 5,
  };
  // optional int32 num_keypoints = 1;
  bool has_num_keypoints() const;
  private:
  bool _internal_has_num_keypoints() const;
  public:
  void clear_num_keypoints();
  ::PROTOBUF_NAMESPACE_ID::int32 num_keypoints() const;
  void set_num_keypoints(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_num_keypoints() const;
  void _internal_set_num_keypoints(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional float y_scale = 2 [default = 10];
  bool has_y_scale() const;
  private:
  bool _internal_has_y_scale() const;
  public:
  void clear_y_scale();
  float y_scale() const;
  void set_y_scale(float value);
  private:
  float _internal_y_scale() const;
  void _internal_set_y_scale(float value);
  public:

  // optional float x_scale = 3 [default = 10];
  bool has_x_scale() const;
  private:
  bool _internal_has_x_scale() const;
  public:
  void clear_x_scale();
  float x_scale() const;
  void set_x_scale(float value);
  private:
  float _internal_x_scale() const;
  void _internal_set_x_scale(float value);
  public:

  // optional float height_scale = 4 [default = 5];
  bool has_height_scale() const;
  private:
  bool _internal_has_height_scale() const;
  public:
  void clear_height_scale();
  float height_scale() const;
  void set_height_scale(float value);
  private:
  float _internal_height_scale() const;
  void _internal_set_height_scale(float value);
  public:

  // optional float width_scale = 5 [default = 5];
  bool has_width_scale() const;
  private:
  bool _internal_has_width_scale() const;
  public:
  void clear_width_scale();
  float width_scale() const;
  void set_width_scale(float value);
  private:
  float _internal_width_scale() const;
  void _internal_set_width_scale(float value);
  public:

  // @@protoc_insertion_point(class_scope:object_detection.protos.KeypointBoxCoder)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_keypoints_;
  float y_scale_;
  float x_scale_;
  float height_scale_;
  float width_scale_;
  friend struct ::TableStruct_object_5fdetection_2fprotos_2fkeypoint_5fbox_5fcoder_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// KeypointBoxCoder

// optional int32 num_keypoints = 1;
inline bool KeypointBoxCoder::_internal_has_num_keypoints() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool KeypointBoxCoder::has_num_keypoints() const {
  return _internal_has_num_keypoints();
}
inline void KeypointBoxCoder::clear_num_keypoints() {
  num_keypoints_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KeypointBoxCoder::_internal_num_keypoints() const {
  return num_keypoints_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KeypointBoxCoder::num_keypoints() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.KeypointBoxCoder.num_keypoints)
  return _internal_num_keypoints();
}
inline void KeypointBoxCoder::_internal_set_num_keypoints(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  num_keypoints_ = value;
}
inline void KeypointBoxCoder::set_num_keypoints(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_num_keypoints(value);
  // @@protoc_insertion_point(field_set:object_detection.protos.KeypointBoxCoder.num_keypoints)
}

// optional float y_scale = 2 [default = 10];
inline bool KeypointBoxCoder::_internal_has_y_scale() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool KeypointBoxCoder::has_y_scale() const {
  return _internal_has_y_scale();
}
inline void KeypointBoxCoder::clear_y_scale() {
  y_scale_ = 10;
  _has_bits_[0] &= ~0x00000002u;
}
inline float KeypointBoxCoder::_internal_y_scale() const {
  return y_scale_;
}
inline float KeypointBoxCoder::y_scale() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.KeypointBoxCoder.y_scale)
  return _internal_y_scale();
}
inline void KeypointBoxCoder::_internal_set_y_scale(float value) {
  _has_bits_[0] |= 0x00000002u;
  y_scale_ = value;
}
inline void KeypointBoxCoder::set_y_scale(float value) {
  _internal_set_y_scale(value);
  // @@protoc_insertion_point(field_set:object_detection.protos.KeypointBoxCoder.y_scale)
}

// optional float x_scale = 3 [default = 10];
inline bool KeypointBoxCoder::_internal_has_x_scale() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool KeypointBoxCoder::has_x_scale() const {
  return _internal_has_x_scale();
}
inline void KeypointBoxCoder::clear_x_scale() {
  x_scale_ = 10;
  _has_bits_[0] &= ~0x00000004u;
}
inline float KeypointBoxCoder::_internal_x_scale() const {
  return x_scale_;
}
inline float KeypointBoxCoder::x_scale() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.KeypointBoxCoder.x_scale)
  return _internal_x_scale();
}
inline void KeypointBoxCoder::_internal_set_x_scale(float value) {
  _has_bits_[0] |= 0x00000004u;
  x_scale_ = value;
}
inline void KeypointBoxCoder::set_x_scale(float value) {
  _internal_set_x_scale(value);
  // @@protoc_insertion_point(field_set:object_detection.protos.KeypointBoxCoder.x_scale)
}

// optional float height_scale = 4 [default = 5];
inline bool KeypointBoxCoder::_internal_has_height_scale() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool KeypointBoxCoder::has_height_scale() const {
  return _internal_has_height_scale();
}
inline void KeypointBoxCoder::clear_height_scale() {
  height_scale_ = 5;
  _has_bits_[0] &= ~0x00000008u;
}
inline float KeypointBoxCoder::_internal_height_scale() const {
  return height_scale_;
}
inline float KeypointBoxCoder::height_scale() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.KeypointBoxCoder.height_scale)
  return _internal_height_scale();
}
inline void KeypointBoxCoder::_internal_set_height_scale(float value) {
  _has_bits_[0] |= 0x00000008u;
  height_scale_ = value;
}
inline void KeypointBoxCoder::set_height_scale(float value) {
  _internal_set_height_scale(value);
  // @@protoc_insertion_point(field_set:object_detection.protos.KeypointBoxCoder.height_scale)
}

// optional float width_scale = 5 [default = 5];
inline bool KeypointBoxCoder::_internal_has_width_scale() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool KeypointBoxCoder::has_width_scale() const {
  return _internal_has_width_scale();
}
inline void KeypointBoxCoder::clear_width_scale() {
  width_scale_ = 5;
  _has_bits_[0] &= ~0x00000010u;
}
inline float KeypointBoxCoder::_internal_width_scale() const {
  return width_scale_;
}
inline float KeypointBoxCoder::width_scale() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.KeypointBoxCoder.width_scale)
  return _internal_width_scale();
}
inline void KeypointBoxCoder::_internal_set_width_scale(float value) {
  _has_bits_[0] |= 0x00000010u;
  width_scale_ = value;
}
inline void KeypointBoxCoder::set_width_scale(float value) {
  _internal_set_width_scale(value);
  // @@protoc_insertion_point(field_set:object_detection.protos.KeypointBoxCoder.width_scale)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace protos
}  // namespace object_detection

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_object_5fdetection_2fprotos_2fkeypoint_5fbox_5fcoder_2eproto
