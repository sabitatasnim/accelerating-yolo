// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: object_detection/protos/image_resizer.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_object_5fdetection_2fprotos_2fimage_5fresizer_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_object_5fdetection_2fprotos_2fimage_5fresizer_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3018000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3018000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_object_5fdetection_2fprotos_2fimage_5fresizer_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_object_5fdetection_2fprotos_2fimage_5fresizer_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_object_5fdetection_2fprotos_2fimage_5fresizer_2eproto;
namespace object_detection {
namespace protos {
class ConditionalShapeResizer;
struct ConditionalShapeResizerDefaultTypeInternal;
extern ConditionalShapeResizerDefaultTypeInternal _ConditionalShapeResizer_default_instance_;
class FixedShapeResizer;
struct FixedShapeResizerDefaultTypeInternal;
extern FixedShapeResizerDefaultTypeInternal _FixedShapeResizer_default_instance_;
class IdentityResizer;
struct IdentityResizerDefaultTypeInternal;
extern IdentityResizerDefaultTypeInternal _IdentityResizer_default_instance_;
class ImageResizer;
struct ImageResizerDefaultTypeInternal;
extern ImageResizerDefaultTypeInternal _ImageResizer_default_instance_;
class KeepAspectRatioResizer;
struct KeepAspectRatioResizerDefaultTypeInternal;
extern KeepAspectRatioResizerDefaultTypeInternal _KeepAspectRatioResizer_default_instance_;
}  // namespace protos
}  // namespace object_detection
PROTOBUF_NAMESPACE_OPEN
template<> ::object_detection::protos::ConditionalShapeResizer* Arena::CreateMaybeMessage<::object_detection::protos::ConditionalShapeResizer>(Arena*);
template<> ::object_detection::protos::FixedShapeResizer* Arena::CreateMaybeMessage<::object_detection::protos::FixedShapeResizer>(Arena*);
template<> ::object_detection::protos::IdentityResizer* Arena::CreateMaybeMessage<::object_detection::protos::IdentityResizer>(Arena*);
template<> ::object_detection::protos::ImageResizer* Arena::CreateMaybeMessage<::object_detection::protos::ImageResizer>(Arena*);
template<> ::object_detection::protos::KeepAspectRatioResizer* Arena::CreateMaybeMessage<::object_detection::protos::KeepAspectRatioResizer>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace object_detection {
namespace protos {

enum ConditionalShapeResizer_ResizeCondition : int {
  ConditionalShapeResizer_ResizeCondition_INVALID = 0,
  ConditionalShapeResizer_ResizeCondition_GREATER = 1,
  ConditionalShapeResizer_ResizeCondition_SMALLER = 2
};
bool ConditionalShapeResizer_ResizeCondition_IsValid(int value);
constexpr ConditionalShapeResizer_ResizeCondition ConditionalShapeResizer_ResizeCondition_ResizeCondition_MIN = ConditionalShapeResizer_ResizeCondition_INVALID;
constexpr ConditionalShapeResizer_ResizeCondition ConditionalShapeResizer_ResizeCondition_ResizeCondition_MAX = ConditionalShapeResizer_ResizeCondition_SMALLER;
constexpr int ConditionalShapeResizer_ResizeCondition_ResizeCondition_ARRAYSIZE = ConditionalShapeResizer_ResizeCondition_ResizeCondition_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ConditionalShapeResizer_ResizeCondition_descriptor();
template<typename T>
inline const std::string& ConditionalShapeResizer_ResizeCondition_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ConditionalShapeResizer_ResizeCondition>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ConditionalShapeResizer_ResizeCondition_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ConditionalShapeResizer_ResizeCondition_descriptor(), enum_t_value);
}
inline bool ConditionalShapeResizer_ResizeCondition_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ConditionalShapeResizer_ResizeCondition* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ConditionalShapeResizer_ResizeCondition>(
    ConditionalShapeResizer_ResizeCondition_descriptor(), name, value);
}
enum ResizeType : int {
  BILINEAR = 0,
  NEAREST_NEIGHBOR = 1,
  BICUBIC = 2,
  AREA = 3
};
bool ResizeType_IsValid(int value);
constexpr ResizeType ResizeType_MIN = BILINEAR;
constexpr ResizeType ResizeType_MAX = AREA;
constexpr int ResizeType_ARRAYSIZE = ResizeType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ResizeType_descriptor();
template<typename T>
inline const std::string& ResizeType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ResizeType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ResizeType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ResizeType_descriptor(), enum_t_value);
}
inline bool ResizeType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ResizeType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ResizeType>(
    ResizeType_descriptor(), name, value);
}
// ===================================================================

class ImageResizer final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:object_detection.protos.ImageResizer) */ {
 public:
  inline ImageResizer() : ImageResizer(nullptr) {}
  ~ImageResizer() override;
  explicit constexpr ImageResizer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ImageResizer(const ImageResizer& from);
  ImageResizer(ImageResizer&& from) noexcept
    : ImageResizer() {
    *this = ::std::move(from);
  }

  inline ImageResizer& operator=(const ImageResizer& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImageResizer& operator=(ImageResizer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ImageResizer& default_instance() {
    return *internal_default_instance();
  }
  enum ImageResizerOneofCase {
    kKeepAspectRatioResizer = 1,
    kFixedShapeResizer = 2,
    kIdentityResizer = 3,
    kConditionalShapeResizer = 4,
    IMAGE_RESIZER_ONEOF_NOT_SET = 0,
  };

  static inline const ImageResizer* internal_default_instance() {
    return reinterpret_cast<const ImageResizer*>(
               &_ImageResizer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ImageResizer& a, ImageResizer& b) {
    a.Swap(&b);
  }
  inline void Swap(ImageResizer* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImageResizer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ImageResizer* New() const final {
    return new ImageResizer();
  }

  ImageResizer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ImageResizer>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ImageResizer& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ImageResizer& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImageResizer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "object_detection.protos.ImageResizer";
  }
  protected:
  explicit ImageResizer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeepAspectRatioResizerFieldNumber = 1,
    kFixedShapeResizerFieldNumber = 2,
    kIdentityResizerFieldNumber = 3,
    kConditionalShapeResizerFieldNumber = 4,
  };
  // .object_detection.protos.KeepAspectRatioResizer keep_aspect_ratio_resizer = 1;
  bool has_keep_aspect_ratio_resizer() const;
  private:
  bool _internal_has_keep_aspect_ratio_resizer() const;
  public:
  void clear_keep_aspect_ratio_resizer();
  const ::object_detection::protos::KeepAspectRatioResizer& keep_aspect_ratio_resizer() const;
  PROTOBUF_MUST_USE_RESULT ::object_detection::protos::KeepAspectRatioResizer* release_keep_aspect_ratio_resizer();
  ::object_detection::protos::KeepAspectRatioResizer* mutable_keep_aspect_ratio_resizer();
  void set_allocated_keep_aspect_ratio_resizer(::object_detection::protos::KeepAspectRatioResizer* keep_aspect_ratio_resizer);
  private:
  const ::object_detection::protos::KeepAspectRatioResizer& _internal_keep_aspect_ratio_resizer() const;
  ::object_detection::protos::KeepAspectRatioResizer* _internal_mutable_keep_aspect_ratio_resizer();
  public:
  void unsafe_arena_set_allocated_keep_aspect_ratio_resizer(
      ::object_detection::protos::KeepAspectRatioResizer* keep_aspect_ratio_resizer);
  ::object_detection::protos::KeepAspectRatioResizer* unsafe_arena_release_keep_aspect_ratio_resizer();

  // .object_detection.protos.FixedShapeResizer fixed_shape_resizer = 2;
  bool has_fixed_shape_resizer() const;
  private:
  bool _internal_has_fixed_shape_resizer() const;
  public:
  void clear_fixed_shape_resizer();
  const ::object_detection::protos::FixedShapeResizer& fixed_shape_resizer() const;
  PROTOBUF_MUST_USE_RESULT ::object_detection::protos::FixedShapeResizer* release_fixed_shape_resizer();
  ::object_detection::protos::FixedShapeResizer* mutable_fixed_shape_resizer();
  void set_allocated_fixed_shape_resizer(::object_detection::protos::FixedShapeResizer* fixed_shape_resizer);
  private:
  const ::object_detection::protos::FixedShapeResizer& _internal_fixed_shape_resizer() const;
  ::object_detection::protos::FixedShapeResizer* _internal_mutable_fixed_shape_resizer();
  public:
  void unsafe_arena_set_allocated_fixed_shape_resizer(
      ::object_detection::protos::FixedShapeResizer* fixed_shape_resizer);
  ::object_detection::protos::FixedShapeResizer* unsafe_arena_release_fixed_shape_resizer();

  // .object_detection.protos.IdentityResizer identity_resizer = 3;
  bool has_identity_resizer() const;
  private:
  bool _internal_has_identity_resizer() const;
  public:
  void clear_identity_resizer();
  const ::object_detection::protos::IdentityResizer& identity_resizer() const;
  PROTOBUF_MUST_USE_RESULT ::object_detection::protos::IdentityResizer* release_identity_resizer();
  ::object_detection::protos::IdentityResizer* mutable_identity_resizer();
  void set_allocated_identity_resizer(::object_detection::protos::IdentityResizer* identity_resizer);
  private:
  const ::object_detection::protos::IdentityResizer& _internal_identity_resizer() const;
  ::object_detection::protos::IdentityResizer* _internal_mutable_identity_resizer();
  public:
  void unsafe_arena_set_allocated_identity_resizer(
      ::object_detection::protos::IdentityResizer* identity_resizer);
  ::object_detection::protos::IdentityResizer* unsafe_arena_release_identity_resizer();

  // .object_detection.protos.ConditionalShapeResizer conditional_shape_resizer = 4;
  bool has_conditional_shape_resizer() const;
  private:
  bool _internal_has_conditional_shape_resizer() const;
  public:
  void clear_conditional_shape_resizer();
  const ::object_detection::protos::ConditionalShapeResizer& conditional_shape_resizer() const;
  PROTOBUF_MUST_USE_RESULT ::object_detection::protos::ConditionalShapeResizer* release_conditional_shape_resizer();
  ::object_detection::protos::ConditionalShapeResizer* mutable_conditional_shape_resizer();
  void set_allocated_conditional_shape_resizer(::object_detection::protos::ConditionalShapeResizer* conditional_shape_resizer);
  private:
  const ::object_detection::protos::ConditionalShapeResizer& _internal_conditional_shape_resizer() const;
  ::object_detection::protos::ConditionalShapeResizer* _internal_mutable_conditional_shape_resizer();
  public:
  void unsafe_arena_set_allocated_conditional_shape_resizer(
      ::object_detection::protos::ConditionalShapeResizer* conditional_shape_resizer);
  ::object_detection::protos::ConditionalShapeResizer* unsafe_arena_release_conditional_shape_resizer();

  void clear_image_resizer_oneof();
  ImageResizerOneofCase image_resizer_oneof_case() const;
  // @@protoc_insertion_point(class_scope:object_detection.protos.ImageResizer)
 private:
  class _Internal;
  void set_has_keep_aspect_ratio_resizer();
  void set_has_fixed_shape_resizer();
  void set_has_identity_resizer();
  void set_has_conditional_shape_resizer();

  inline bool has_image_resizer_oneof() const;
  inline void clear_has_image_resizer_oneof();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union ImageResizerOneofUnion {
    constexpr ImageResizerOneofUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::object_detection::protos::KeepAspectRatioResizer* keep_aspect_ratio_resizer_;
    ::object_detection::protos::FixedShapeResizer* fixed_shape_resizer_;
    ::object_detection::protos::IdentityResizer* identity_resizer_;
    ::object_detection::protos::ConditionalShapeResizer* conditional_shape_resizer_;
  } image_resizer_oneof_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_object_5fdetection_2fprotos_2fimage_5fresizer_2eproto;
};
// -------------------------------------------------------------------

class IdentityResizer final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:object_detection.protos.IdentityResizer) */ {
 public:
  inline IdentityResizer() : IdentityResizer(nullptr) {}
  explicit constexpr IdentityResizer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IdentityResizer(const IdentityResizer& from);
  IdentityResizer(IdentityResizer&& from) noexcept
    : IdentityResizer() {
    *this = ::std::move(from);
  }

  inline IdentityResizer& operator=(const IdentityResizer& from) {
    CopyFrom(from);
    return *this;
  }
  inline IdentityResizer& operator=(IdentityResizer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IdentityResizer& default_instance() {
    return *internal_default_instance();
  }
  static inline const IdentityResizer* internal_default_instance() {
    return reinterpret_cast<const IdentityResizer*>(
               &_IdentityResizer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(IdentityResizer& a, IdentityResizer& b) {
    a.Swap(&b);
  }
  inline void Swap(IdentityResizer* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IdentityResizer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IdentityResizer* New() const final {
    return new IdentityResizer();
  }

  IdentityResizer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IdentityResizer>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const IdentityResizer& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const IdentityResizer& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "object_detection.protos.IdentityResizer";
  }
  protected:
  explicit IdentityResizer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:object_detection.protos.IdentityResizer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_object_5fdetection_2fprotos_2fimage_5fresizer_2eproto;
};
// -------------------------------------------------------------------

class KeepAspectRatioResizer final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:object_detection.protos.KeepAspectRatioResizer) */ {
 public:
  inline KeepAspectRatioResizer() : KeepAspectRatioResizer(nullptr) {}
  ~KeepAspectRatioResizer() override;
  explicit constexpr KeepAspectRatioResizer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  KeepAspectRatioResizer(const KeepAspectRatioResizer& from);
  KeepAspectRatioResizer(KeepAspectRatioResizer&& from) noexcept
    : KeepAspectRatioResizer() {
    *this = ::std::move(from);
  }

  inline KeepAspectRatioResizer& operator=(const KeepAspectRatioResizer& from) {
    CopyFrom(from);
    return *this;
  }
  inline KeepAspectRatioResizer& operator=(KeepAspectRatioResizer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const KeepAspectRatioResizer& default_instance() {
    return *internal_default_instance();
  }
  static inline const KeepAspectRatioResizer* internal_default_instance() {
    return reinterpret_cast<const KeepAspectRatioResizer*>(
               &_KeepAspectRatioResizer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(KeepAspectRatioResizer& a, KeepAspectRatioResizer& b) {
    a.Swap(&b);
  }
  inline void Swap(KeepAspectRatioResizer* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KeepAspectRatioResizer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline KeepAspectRatioResizer* New() const final {
    return new KeepAspectRatioResizer();
  }

  KeepAspectRatioResizer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<KeepAspectRatioResizer>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const KeepAspectRatioResizer& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const KeepAspectRatioResizer& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KeepAspectRatioResizer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "object_detection.protos.KeepAspectRatioResizer";
  }
  protected:
  explicit KeepAspectRatioResizer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPerChannelPadValueFieldNumber = 6,
    kResizeMethodFieldNumber = 3,
    kPadToMaxDimensionFieldNumber = 4,
    kConvertToGrayscaleFieldNumber = 5,
    kMinDimensionFieldNumber = 1,
    kMaxDimensionFieldNumber = 2,
  };
  // repeated float per_channel_pad_value = 6;
  int per_channel_pad_value_size() const;
  private:
  int _internal_per_channel_pad_value_size() const;
  public:
  void clear_per_channel_pad_value();
  private:
  float _internal_per_channel_pad_value(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_per_channel_pad_value() const;
  void _internal_add_per_channel_pad_value(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_per_channel_pad_value();
  public:
  float per_channel_pad_value(int index) const;
  void set_per_channel_pad_value(int index, float value);
  void add_per_channel_pad_value(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      per_channel_pad_value() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_per_channel_pad_value();

  // optional .object_detection.protos.ResizeType resize_method = 3 [default = BILINEAR];
  bool has_resize_method() const;
  private:
  bool _internal_has_resize_method() const;
  public:
  void clear_resize_method();
  ::object_detection::protos::ResizeType resize_method() const;
  void set_resize_method(::object_detection::protos::ResizeType value);
  private:
  ::object_detection::protos::ResizeType _internal_resize_method() const;
  void _internal_set_resize_method(::object_detection::protos::ResizeType value);
  public:

  // optional bool pad_to_max_dimension = 4 [default = false];
  bool has_pad_to_max_dimension() const;
  private:
  bool _internal_has_pad_to_max_dimension() const;
  public:
  void clear_pad_to_max_dimension();
  bool pad_to_max_dimension() const;
  void set_pad_to_max_dimension(bool value);
  private:
  bool _internal_pad_to_max_dimension() const;
  void _internal_set_pad_to_max_dimension(bool value);
  public:

  // optional bool convert_to_grayscale = 5 [default = false];
  bool has_convert_to_grayscale() const;
  private:
  bool _internal_has_convert_to_grayscale() const;
  public:
  void clear_convert_to_grayscale();
  bool convert_to_grayscale() const;
  void set_convert_to_grayscale(bool value);
  private:
  bool _internal_convert_to_grayscale() const;
  void _internal_set_convert_to_grayscale(bool value);
  public:

  // optional int32 min_dimension = 1 [default = 600];
  bool has_min_dimension() const;
  private:
  bool _internal_has_min_dimension() const;
  public:
  void clear_min_dimension();
  ::PROTOBUF_NAMESPACE_ID::int32 min_dimension() const;
  void set_min_dimension(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_min_dimension() const;
  void _internal_set_min_dimension(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 max_dimension = 2 [default = 1024];
  bool has_max_dimension() const;
  private:
  bool _internal_has_max_dimension() const;
  public:
  void clear_max_dimension();
  ::PROTOBUF_NAMESPACE_ID::int32 max_dimension() const;
  void set_max_dimension(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_max_dimension() const;
  void _internal_set_max_dimension(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:object_detection.protos.KeepAspectRatioResizer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > per_channel_pad_value_;
  int resize_method_;
  bool pad_to_max_dimension_;
  bool convert_to_grayscale_;
  ::PROTOBUF_NAMESPACE_ID::int32 min_dimension_;
  ::PROTOBUF_NAMESPACE_ID::int32 max_dimension_;
  friend struct ::TableStruct_object_5fdetection_2fprotos_2fimage_5fresizer_2eproto;
};
// -------------------------------------------------------------------

class FixedShapeResizer final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:object_detection.protos.FixedShapeResizer) */ {
 public:
  inline FixedShapeResizer() : FixedShapeResizer(nullptr) {}
  ~FixedShapeResizer() override;
  explicit constexpr FixedShapeResizer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FixedShapeResizer(const FixedShapeResizer& from);
  FixedShapeResizer(FixedShapeResizer&& from) noexcept
    : FixedShapeResizer() {
    *this = ::std::move(from);
  }

  inline FixedShapeResizer& operator=(const FixedShapeResizer& from) {
    CopyFrom(from);
    return *this;
  }
  inline FixedShapeResizer& operator=(FixedShapeResizer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FixedShapeResizer& default_instance() {
    return *internal_default_instance();
  }
  static inline const FixedShapeResizer* internal_default_instance() {
    return reinterpret_cast<const FixedShapeResizer*>(
               &_FixedShapeResizer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(FixedShapeResizer& a, FixedShapeResizer& b) {
    a.Swap(&b);
  }
  inline void Swap(FixedShapeResizer* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FixedShapeResizer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FixedShapeResizer* New() const final {
    return new FixedShapeResizer();
  }

  FixedShapeResizer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FixedShapeResizer>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FixedShapeResizer& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const FixedShapeResizer& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FixedShapeResizer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "object_detection.protos.FixedShapeResizer";
  }
  protected:
  explicit FixedShapeResizer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResizeMethodFieldNumber = 3,
    kConvertToGrayscaleFieldNumber = 4,
    kHeightFieldNumber = 1,
    kWidthFieldNumber = 2,
  };
  // optional .object_detection.protos.ResizeType resize_method = 3 [default = BILINEAR];
  bool has_resize_method() const;
  private:
  bool _internal_has_resize_method() const;
  public:
  void clear_resize_method();
  ::object_detection::protos::ResizeType resize_method() const;
  void set_resize_method(::object_detection::protos::ResizeType value);
  private:
  ::object_detection::protos::ResizeType _internal_resize_method() const;
  void _internal_set_resize_method(::object_detection::protos::ResizeType value);
  public:

  // optional bool convert_to_grayscale = 4 [default = false];
  bool has_convert_to_grayscale() const;
  private:
  bool _internal_has_convert_to_grayscale() const;
  public:
  void clear_convert_to_grayscale();
  bool convert_to_grayscale() const;
  void set_convert_to_grayscale(bool value);
  private:
  bool _internal_convert_to_grayscale() const;
  void _internal_set_convert_to_grayscale(bool value);
  public:

  // optional int32 height = 1 [default = 300];
  bool has_height() const;
  private:
  bool _internal_has_height() const;
  public:
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::int32 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_height() const;
  void _internal_set_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 width = 2 [default = 300];
  bool has_width() const;
  private:
  bool _internal_has_width() const;
  public:
  void clear_width();
  ::PROTOBUF_NAMESPACE_ID::int32 width() const;
  void set_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_width() const;
  void _internal_set_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:object_detection.protos.FixedShapeResizer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int resize_method_;
  bool convert_to_grayscale_;
  ::PROTOBUF_NAMESPACE_ID::int32 height_;
  ::PROTOBUF_NAMESPACE_ID::int32 width_;
  friend struct ::TableStruct_object_5fdetection_2fprotos_2fimage_5fresizer_2eproto;
};
// -------------------------------------------------------------------

class ConditionalShapeResizer final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:object_detection.protos.ConditionalShapeResizer) */ {
 public:
  inline ConditionalShapeResizer() : ConditionalShapeResizer(nullptr) {}
  ~ConditionalShapeResizer() override;
  explicit constexpr ConditionalShapeResizer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ConditionalShapeResizer(const ConditionalShapeResizer& from);
  ConditionalShapeResizer(ConditionalShapeResizer&& from) noexcept
    : ConditionalShapeResizer() {
    *this = ::std::move(from);
  }

  inline ConditionalShapeResizer& operator=(const ConditionalShapeResizer& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConditionalShapeResizer& operator=(ConditionalShapeResizer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ConditionalShapeResizer& default_instance() {
    return *internal_default_instance();
  }
  static inline const ConditionalShapeResizer* internal_default_instance() {
    return reinterpret_cast<const ConditionalShapeResizer*>(
               &_ConditionalShapeResizer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ConditionalShapeResizer& a, ConditionalShapeResizer& b) {
    a.Swap(&b);
  }
  inline void Swap(ConditionalShapeResizer* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConditionalShapeResizer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ConditionalShapeResizer* New() const final {
    return new ConditionalShapeResizer();
  }

  ConditionalShapeResizer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConditionalShapeResizer>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ConditionalShapeResizer& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ConditionalShapeResizer& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConditionalShapeResizer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "object_detection.protos.ConditionalShapeResizer";
  }
  protected:
  explicit ConditionalShapeResizer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ConditionalShapeResizer_ResizeCondition ResizeCondition;
  static constexpr ResizeCondition INVALID =
    ConditionalShapeResizer_ResizeCondition_INVALID;
  static constexpr ResizeCondition GREATER =
    ConditionalShapeResizer_ResizeCondition_GREATER;
  static constexpr ResizeCondition SMALLER =
    ConditionalShapeResizer_ResizeCondition_SMALLER;
  static inline bool ResizeCondition_IsValid(int value) {
    return ConditionalShapeResizer_ResizeCondition_IsValid(value);
  }
  static constexpr ResizeCondition ResizeCondition_MIN =
    ConditionalShapeResizer_ResizeCondition_ResizeCondition_MIN;
  static constexpr ResizeCondition ResizeCondition_MAX =
    ConditionalShapeResizer_ResizeCondition_ResizeCondition_MAX;
  static constexpr int ResizeCondition_ARRAYSIZE =
    ConditionalShapeResizer_ResizeCondition_ResizeCondition_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ResizeCondition_descriptor() {
    return ConditionalShapeResizer_ResizeCondition_descriptor();
  }
  template<typename T>
  static inline const std::string& ResizeCondition_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ResizeCondition>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ResizeCondition_Name.");
    return ConditionalShapeResizer_ResizeCondition_Name(enum_t_value);
  }
  static inline bool ResizeCondition_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ResizeCondition* value) {
    return ConditionalShapeResizer_ResizeCondition_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kResizeMethodFieldNumber = 3,
    kConvertToGrayscaleFieldNumber = 4,
    kConditionFieldNumber = 1,
    kSizeThresholdFieldNumber = 2,
  };
  // optional .object_detection.protos.ResizeType resize_method = 3 [default = BILINEAR];
  bool has_resize_method() const;
  private:
  bool _internal_has_resize_method() const;
  public:
  void clear_resize_method();
  ::object_detection::protos::ResizeType resize_method() const;
  void set_resize_method(::object_detection::protos::ResizeType value);
  private:
  ::object_detection::protos::ResizeType _internal_resize_method() const;
  void _internal_set_resize_method(::object_detection::protos::ResizeType value);
  public:

  // optional bool convert_to_grayscale = 4 [default = false];
  bool has_convert_to_grayscale() const;
  private:
  bool _internal_has_convert_to_grayscale() const;
  public:
  void clear_convert_to_grayscale();
  bool convert_to_grayscale() const;
  void set_convert_to_grayscale(bool value);
  private:
  bool _internal_convert_to_grayscale() const;
  void _internal_set_convert_to_grayscale(bool value);
  public:

  // optional .object_detection.protos.ConditionalShapeResizer.ResizeCondition condition = 1 [default = GREATER];
  bool has_condition() const;
  private:
  bool _internal_has_condition() const;
  public:
  void clear_condition();
  ::object_detection::protos::ConditionalShapeResizer_ResizeCondition condition() const;
  void set_condition(::object_detection::protos::ConditionalShapeResizer_ResizeCondition value);
  private:
  ::object_detection::protos::ConditionalShapeResizer_ResizeCondition _internal_condition() const;
  void _internal_set_condition(::object_detection::protos::ConditionalShapeResizer_ResizeCondition value);
  public:

  // optional int32 size_threshold = 2 [default = 300];
  bool has_size_threshold() const;
  private:
  bool _internal_has_size_threshold() const;
  public:
  void clear_size_threshold();
  ::PROTOBUF_NAMESPACE_ID::int32 size_threshold() const;
  void set_size_threshold(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_size_threshold() const;
  void _internal_set_size_threshold(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:object_detection.protos.ConditionalShapeResizer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int resize_method_;
  bool convert_to_grayscale_;
  int condition_;
  ::PROTOBUF_NAMESPACE_ID::int32 size_threshold_;
  friend struct ::TableStruct_object_5fdetection_2fprotos_2fimage_5fresizer_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ImageResizer

// .object_detection.protos.KeepAspectRatioResizer keep_aspect_ratio_resizer = 1;
inline bool ImageResizer::_internal_has_keep_aspect_ratio_resizer() const {
  return image_resizer_oneof_case() == kKeepAspectRatioResizer;
}
inline bool ImageResizer::has_keep_aspect_ratio_resizer() const {
  return _internal_has_keep_aspect_ratio_resizer();
}
inline void ImageResizer::set_has_keep_aspect_ratio_resizer() {
  _oneof_case_[0] = kKeepAspectRatioResizer;
}
inline void ImageResizer::clear_keep_aspect_ratio_resizer() {
  if (_internal_has_keep_aspect_ratio_resizer()) {
    if (GetArenaForAllocation() == nullptr) {
      delete image_resizer_oneof_.keep_aspect_ratio_resizer_;
    }
    clear_has_image_resizer_oneof();
  }
}
inline ::object_detection::protos::KeepAspectRatioResizer* ImageResizer::release_keep_aspect_ratio_resizer() {
  // @@protoc_insertion_point(field_release:object_detection.protos.ImageResizer.keep_aspect_ratio_resizer)
  if (_internal_has_keep_aspect_ratio_resizer()) {
    clear_has_image_resizer_oneof();
      ::object_detection::protos::KeepAspectRatioResizer* temp = image_resizer_oneof_.keep_aspect_ratio_resizer_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    image_resizer_oneof_.keep_aspect_ratio_resizer_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::object_detection::protos::KeepAspectRatioResizer& ImageResizer::_internal_keep_aspect_ratio_resizer() const {
  return _internal_has_keep_aspect_ratio_resizer()
      ? *image_resizer_oneof_.keep_aspect_ratio_resizer_
      : reinterpret_cast< ::object_detection::protos::KeepAspectRatioResizer&>(::object_detection::protos::_KeepAspectRatioResizer_default_instance_);
}
inline const ::object_detection::protos::KeepAspectRatioResizer& ImageResizer::keep_aspect_ratio_resizer() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.ImageResizer.keep_aspect_ratio_resizer)
  return _internal_keep_aspect_ratio_resizer();
}
inline ::object_detection::protos::KeepAspectRatioResizer* ImageResizer::unsafe_arena_release_keep_aspect_ratio_resizer() {
  // @@protoc_insertion_point(field_unsafe_arena_release:object_detection.protos.ImageResizer.keep_aspect_ratio_resizer)
  if (_internal_has_keep_aspect_ratio_resizer()) {
    clear_has_image_resizer_oneof();
    ::object_detection::protos::KeepAspectRatioResizer* temp = image_resizer_oneof_.keep_aspect_ratio_resizer_;
    image_resizer_oneof_.keep_aspect_ratio_resizer_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ImageResizer::unsafe_arena_set_allocated_keep_aspect_ratio_resizer(::object_detection::protos::KeepAspectRatioResizer* keep_aspect_ratio_resizer) {
  clear_image_resizer_oneof();
  if (keep_aspect_ratio_resizer) {
    set_has_keep_aspect_ratio_resizer();
    image_resizer_oneof_.keep_aspect_ratio_resizer_ = keep_aspect_ratio_resizer;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:object_detection.protos.ImageResizer.keep_aspect_ratio_resizer)
}
inline ::object_detection::protos::KeepAspectRatioResizer* ImageResizer::_internal_mutable_keep_aspect_ratio_resizer() {
  if (!_internal_has_keep_aspect_ratio_resizer()) {
    clear_image_resizer_oneof();
    set_has_keep_aspect_ratio_resizer();
    image_resizer_oneof_.keep_aspect_ratio_resizer_ = CreateMaybeMessage< ::object_detection::protos::KeepAspectRatioResizer >(GetArenaForAllocation());
  }
  return image_resizer_oneof_.keep_aspect_ratio_resizer_;
}
inline ::object_detection::protos::KeepAspectRatioResizer* ImageResizer::mutable_keep_aspect_ratio_resizer() {
  ::object_detection::protos::KeepAspectRatioResizer* _msg = _internal_mutable_keep_aspect_ratio_resizer();
  // @@protoc_insertion_point(field_mutable:object_detection.protos.ImageResizer.keep_aspect_ratio_resizer)
  return _msg;
}

// .object_detection.protos.FixedShapeResizer fixed_shape_resizer = 2;
inline bool ImageResizer::_internal_has_fixed_shape_resizer() const {
  return image_resizer_oneof_case() == kFixedShapeResizer;
}
inline bool ImageResizer::has_fixed_shape_resizer() const {
  return _internal_has_fixed_shape_resizer();
}
inline void ImageResizer::set_has_fixed_shape_resizer() {
  _oneof_case_[0] = kFixedShapeResizer;
}
inline void ImageResizer::clear_fixed_shape_resizer() {
  if (_internal_has_fixed_shape_resizer()) {
    if (GetArenaForAllocation() == nullptr) {
      delete image_resizer_oneof_.fixed_shape_resizer_;
    }
    clear_has_image_resizer_oneof();
  }
}
inline ::object_detection::protos::FixedShapeResizer* ImageResizer::release_fixed_shape_resizer() {
  // @@protoc_insertion_point(field_release:object_detection.protos.ImageResizer.fixed_shape_resizer)
  if (_internal_has_fixed_shape_resizer()) {
    clear_has_image_resizer_oneof();
      ::object_detection::protos::FixedShapeResizer* temp = image_resizer_oneof_.fixed_shape_resizer_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    image_resizer_oneof_.fixed_shape_resizer_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::object_detection::protos::FixedShapeResizer& ImageResizer::_internal_fixed_shape_resizer() const {
  return _internal_has_fixed_shape_resizer()
      ? *image_resizer_oneof_.fixed_shape_resizer_
      : reinterpret_cast< ::object_detection::protos::FixedShapeResizer&>(::object_detection::protos::_FixedShapeResizer_default_instance_);
}
inline const ::object_detection::protos::FixedShapeResizer& ImageResizer::fixed_shape_resizer() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.ImageResizer.fixed_shape_resizer)
  return _internal_fixed_shape_resizer();
}
inline ::object_detection::protos::FixedShapeResizer* ImageResizer::unsafe_arena_release_fixed_shape_resizer() {
  // @@protoc_insertion_point(field_unsafe_arena_release:object_detection.protos.ImageResizer.fixed_shape_resizer)
  if (_internal_has_fixed_shape_resizer()) {
    clear_has_image_resizer_oneof();
    ::object_detection::protos::FixedShapeResizer* temp = image_resizer_oneof_.fixed_shape_resizer_;
    image_resizer_oneof_.fixed_shape_resizer_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ImageResizer::unsafe_arena_set_allocated_fixed_shape_resizer(::object_detection::protos::FixedShapeResizer* fixed_shape_resizer) {
  clear_image_resizer_oneof();
  if (fixed_shape_resizer) {
    set_has_fixed_shape_resizer();
    image_resizer_oneof_.fixed_shape_resizer_ = fixed_shape_resizer;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:object_detection.protos.ImageResizer.fixed_shape_resizer)
}
inline ::object_detection::protos::FixedShapeResizer* ImageResizer::_internal_mutable_fixed_shape_resizer() {
  if (!_internal_has_fixed_shape_resizer()) {
    clear_image_resizer_oneof();
    set_has_fixed_shape_resizer();
    image_resizer_oneof_.fixed_shape_resizer_ = CreateMaybeMessage< ::object_detection::protos::FixedShapeResizer >(GetArenaForAllocation());
  }
  return image_resizer_oneof_.fixed_shape_resizer_;
}
inline ::object_detection::protos::FixedShapeResizer* ImageResizer::mutable_fixed_shape_resizer() {
  ::object_detection::protos::FixedShapeResizer* _msg = _internal_mutable_fixed_shape_resizer();
  // @@protoc_insertion_point(field_mutable:object_detection.protos.ImageResizer.fixed_shape_resizer)
  return _msg;
}

// .object_detection.protos.IdentityResizer identity_resizer = 3;
inline bool ImageResizer::_internal_has_identity_resizer() const {
  return image_resizer_oneof_case() == kIdentityResizer;
}
inline bool ImageResizer::has_identity_resizer() const {
  return _internal_has_identity_resizer();
}
inline void ImageResizer::set_has_identity_resizer() {
  _oneof_case_[0] = kIdentityResizer;
}
inline void ImageResizer::clear_identity_resizer() {
  if (_internal_has_identity_resizer()) {
    if (GetArenaForAllocation() == nullptr) {
      delete image_resizer_oneof_.identity_resizer_;
    }
    clear_has_image_resizer_oneof();
  }
}
inline ::object_detection::protos::IdentityResizer* ImageResizer::release_identity_resizer() {
  // @@protoc_insertion_point(field_release:object_detection.protos.ImageResizer.identity_resizer)
  if (_internal_has_identity_resizer()) {
    clear_has_image_resizer_oneof();
      ::object_detection::protos::IdentityResizer* temp = image_resizer_oneof_.identity_resizer_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    image_resizer_oneof_.identity_resizer_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::object_detection::protos::IdentityResizer& ImageResizer::_internal_identity_resizer() const {
  return _internal_has_identity_resizer()
      ? *image_resizer_oneof_.identity_resizer_
      : reinterpret_cast< ::object_detection::protos::IdentityResizer&>(::object_detection::protos::_IdentityResizer_default_instance_);
}
inline const ::object_detection::protos::IdentityResizer& ImageResizer::identity_resizer() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.ImageResizer.identity_resizer)
  return _internal_identity_resizer();
}
inline ::object_detection::protos::IdentityResizer* ImageResizer::unsafe_arena_release_identity_resizer() {
  // @@protoc_insertion_point(field_unsafe_arena_release:object_detection.protos.ImageResizer.identity_resizer)
  if (_internal_has_identity_resizer()) {
    clear_has_image_resizer_oneof();
    ::object_detection::protos::IdentityResizer* temp = image_resizer_oneof_.identity_resizer_;
    image_resizer_oneof_.identity_resizer_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ImageResizer::unsafe_arena_set_allocated_identity_resizer(::object_detection::protos::IdentityResizer* identity_resizer) {
  clear_image_resizer_oneof();
  if (identity_resizer) {
    set_has_identity_resizer();
    image_resizer_oneof_.identity_resizer_ = identity_resizer;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:object_detection.protos.ImageResizer.identity_resizer)
}
inline ::object_detection::protos::IdentityResizer* ImageResizer::_internal_mutable_identity_resizer() {
  if (!_internal_has_identity_resizer()) {
    clear_image_resizer_oneof();
    set_has_identity_resizer();
    image_resizer_oneof_.identity_resizer_ = CreateMaybeMessage< ::object_detection::protos::IdentityResizer >(GetArenaForAllocation());
  }
  return image_resizer_oneof_.identity_resizer_;
}
inline ::object_detection::protos::IdentityResizer* ImageResizer::mutable_identity_resizer() {
  ::object_detection::protos::IdentityResizer* _msg = _internal_mutable_identity_resizer();
  // @@protoc_insertion_point(field_mutable:object_detection.protos.ImageResizer.identity_resizer)
  return _msg;
}

// .object_detection.protos.ConditionalShapeResizer conditional_shape_resizer = 4;
inline bool ImageResizer::_internal_has_conditional_shape_resizer() const {
  return image_resizer_oneof_case() == kConditionalShapeResizer;
}
inline bool ImageResizer::has_conditional_shape_resizer() const {
  return _internal_has_conditional_shape_resizer();
}
inline void ImageResizer::set_has_conditional_shape_resizer() {
  _oneof_case_[0] = kConditionalShapeResizer;
}
inline void ImageResizer::clear_conditional_shape_resizer() {
  if (_internal_has_conditional_shape_resizer()) {
    if (GetArenaForAllocation() == nullptr) {
      delete image_resizer_oneof_.conditional_shape_resizer_;
    }
    clear_has_image_resizer_oneof();
  }
}
inline ::object_detection::protos::ConditionalShapeResizer* ImageResizer::release_conditional_shape_resizer() {
  // @@protoc_insertion_point(field_release:object_detection.protos.ImageResizer.conditional_shape_resizer)
  if (_internal_has_conditional_shape_resizer()) {
    clear_has_image_resizer_oneof();
      ::object_detection::protos::ConditionalShapeResizer* temp = image_resizer_oneof_.conditional_shape_resizer_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    image_resizer_oneof_.conditional_shape_resizer_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::object_detection::protos::ConditionalShapeResizer& ImageResizer::_internal_conditional_shape_resizer() const {
  return _internal_has_conditional_shape_resizer()
      ? *image_resizer_oneof_.conditional_shape_resizer_
      : reinterpret_cast< ::object_detection::protos::ConditionalShapeResizer&>(::object_detection::protos::_ConditionalShapeResizer_default_instance_);
}
inline const ::object_detection::protos::ConditionalShapeResizer& ImageResizer::conditional_shape_resizer() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.ImageResizer.conditional_shape_resizer)
  return _internal_conditional_shape_resizer();
}
inline ::object_detection::protos::ConditionalShapeResizer* ImageResizer::unsafe_arena_release_conditional_shape_resizer() {
  // @@protoc_insertion_point(field_unsafe_arena_release:object_detection.protos.ImageResizer.conditional_shape_resizer)
  if (_internal_has_conditional_shape_resizer()) {
    clear_has_image_resizer_oneof();
    ::object_detection::protos::ConditionalShapeResizer* temp = image_resizer_oneof_.conditional_shape_resizer_;
    image_resizer_oneof_.conditional_shape_resizer_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ImageResizer::unsafe_arena_set_allocated_conditional_shape_resizer(::object_detection::protos::ConditionalShapeResizer* conditional_shape_resizer) {
  clear_image_resizer_oneof();
  if (conditional_shape_resizer) {
    set_has_conditional_shape_resizer();
    image_resizer_oneof_.conditional_shape_resizer_ = conditional_shape_resizer;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:object_detection.protos.ImageResizer.conditional_shape_resizer)
}
inline ::object_detection::protos::ConditionalShapeResizer* ImageResizer::_internal_mutable_conditional_shape_resizer() {
  if (!_internal_has_conditional_shape_resizer()) {
    clear_image_resizer_oneof();
    set_has_conditional_shape_resizer();
    image_resizer_oneof_.conditional_shape_resizer_ = CreateMaybeMessage< ::object_detection::protos::ConditionalShapeResizer >(GetArenaForAllocation());
  }
  return image_resizer_oneof_.conditional_shape_resizer_;
}
inline ::object_detection::protos::ConditionalShapeResizer* ImageResizer::mutable_conditional_shape_resizer() {
  ::object_detection::protos::ConditionalShapeResizer* _msg = _internal_mutable_conditional_shape_resizer();
  // @@protoc_insertion_point(field_mutable:object_detection.protos.ImageResizer.conditional_shape_resizer)
  return _msg;
}

inline bool ImageResizer::has_image_resizer_oneof() const {
  return image_resizer_oneof_case() != IMAGE_RESIZER_ONEOF_NOT_SET;
}
inline void ImageResizer::clear_has_image_resizer_oneof() {
  _oneof_case_[0] = IMAGE_RESIZER_ONEOF_NOT_SET;
}
inline ImageResizer::ImageResizerOneofCase ImageResizer::image_resizer_oneof_case() const {
  return ImageResizer::ImageResizerOneofCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// IdentityResizer

// -------------------------------------------------------------------

// KeepAspectRatioResizer

// optional int32 min_dimension = 1 [default = 600];
inline bool KeepAspectRatioResizer::_internal_has_min_dimension() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool KeepAspectRatioResizer::has_min_dimension() const {
  return _internal_has_min_dimension();
}
inline void KeepAspectRatioResizer::clear_min_dimension() {
  min_dimension_ = 600;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KeepAspectRatioResizer::_internal_min_dimension() const {
  return min_dimension_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KeepAspectRatioResizer::min_dimension() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.KeepAspectRatioResizer.min_dimension)
  return _internal_min_dimension();
}
inline void KeepAspectRatioResizer::_internal_set_min_dimension(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  min_dimension_ = value;
}
inline void KeepAspectRatioResizer::set_min_dimension(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_min_dimension(value);
  // @@protoc_insertion_point(field_set:object_detection.protos.KeepAspectRatioResizer.min_dimension)
}

// optional int32 max_dimension = 2 [default = 1024];
inline bool KeepAspectRatioResizer::_internal_has_max_dimension() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool KeepAspectRatioResizer::has_max_dimension() const {
  return _internal_has_max_dimension();
}
inline void KeepAspectRatioResizer::clear_max_dimension() {
  max_dimension_ = 1024;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KeepAspectRatioResizer::_internal_max_dimension() const {
  return max_dimension_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KeepAspectRatioResizer::max_dimension() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.KeepAspectRatioResizer.max_dimension)
  return _internal_max_dimension();
}
inline void KeepAspectRatioResizer::_internal_set_max_dimension(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  max_dimension_ = value;
}
inline void KeepAspectRatioResizer::set_max_dimension(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_max_dimension(value);
  // @@protoc_insertion_point(field_set:object_detection.protos.KeepAspectRatioResizer.max_dimension)
}

// optional .object_detection.protos.ResizeType resize_method = 3 [default = BILINEAR];
inline bool KeepAspectRatioResizer::_internal_has_resize_method() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool KeepAspectRatioResizer::has_resize_method() const {
  return _internal_has_resize_method();
}
inline void KeepAspectRatioResizer::clear_resize_method() {
  resize_method_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::object_detection::protos::ResizeType KeepAspectRatioResizer::_internal_resize_method() const {
  return static_cast< ::object_detection::protos::ResizeType >(resize_method_);
}
inline ::object_detection::protos::ResizeType KeepAspectRatioResizer::resize_method() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.KeepAspectRatioResizer.resize_method)
  return _internal_resize_method();
}
inline void KeepAspectRatioResizer::_internal_set_resize_method(::object_detection::protos::ResizeType value) {
  assert(::object_detection::protos::ResizeType_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  resize_method_ = value;
}
inline void KeepAspectRatioResizer::set_resize_method(::object_detection::protos::ResizeType value) {
  _internal_set_resize_method(value);
  // @@protoc_insertion_point(field_set:object_detection.protos.KeepAspectRatioResizer.resize_method)
}

// optional bool pad_to_max_dimension = 4 [default = false];
inline bool KeepAspectRatioResizer::_internal_has_pad_to_max_dimension() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool KeepAspectRatioResizer::has_pad_to_max_dimension() const {
  return _internal_has_pad_to_max_dimension();
}
inline void KeepAspectRatioResizer::clear_pad_to_max_dimension() {
  pad_to_max_dimension_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool KeepAspectRatioResizer::_internal_pad_to_max_dimension() const {
  return pad_to_max_dimension_;
}
inline bool KeepAspectRatioResizer::pad_to_max_dimension() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.KeepAspectRatioResizer.pad_to_max_dimension)
  return _internal_pad_to_max_dimension();
}
inline void KeepAspectRatioResizer::_internal_set_pad_to_max_dimension(bool value) {
  _has_bits_[0] |= 0x00000002u;
  pad_to_max_dimension_ = value;
}
inline void KeepAspectRatioResizer::set_pad_to_max_dimension(bool value) {
  _internal_set_pad_to_max_dimension(value);
  // @@protoc_insertion_point(field_set:object_detection.protos.KeepAspectRatioResizer.pad_to_max_dimension)
}

// optional bool convert_to_grayscale = 5 [default = false];
inline bool KeepAspectRatioResizer::_internal_has_convert_to_grayscale() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool KeepAspectRatioResizer::has_convert_to_grayscale() const {
  return _internal_has_convert_to_grayscale();
}
inline void KeepAspectRatioResizer::clear_convert_to_grayscale() {
  convert_to_grayscale_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool KeepAspectRatioResizer::_internal_convert_to_grayscale() const {
  return convert_to_grayscale_;
}
inline bool KeepAspectRatioResizer::convert_to_grayscale() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.KeepAspectRatioResizer.convert_to_grayscale)
  return _internal_convert_to_grayscale();
}
inline void KeepAspectRatioResizer::_internal_set_convert_to_grayscale(bool value) {
  _has_bits_[0] |= 0x00000004u;
  convert_to_grayscale_ = value;
}
inline void KeepAspectRatioResizer::set_convert_to_grayscale(bool value) {
  _internal_set_convert_to_grayscale(value);
  // @@protoc_insertion_point(field_set:object_detection.protos.KeepAspectRatioResizer.convert_to_grayscale)
}

// repeated float per_channel_pad_value = 6;
inline int KeepAspectRatioResizer::_internal_per_channel_pad_value_size() const {
  return per_channel_pad_value_.size();
}
inline int KeepAspectRatioResizer::per_channel_pad_value_size() const {
  return _internal_per_channel_pad_value_size();
}
inline void KeepAspectRatioResizer::clear_per_channel_pad_value() {
  per_channel_pad_value_.Clear();
}
inline float KeepAspectRatioResizer::_internal_per_channel_pad_value(int index) const {
  return per_channel_pad_value_.Get(index);
}
inline float KeepAspectRatioResizer::per_channel_pad_value(int index) const {
  // @@protoc_insertion_point(field_get:object_detection.protos.KeepAspectRatioResizer.per_channel_pad_value)
  return _internal_per_channel_pad_value(index);
}
inline void KeepAspectRatioResizer::set_per_channel_pad_value(int index, float value) {
  per_channel_pad_value_.Set(index, value);
  // @@protoc_insertion_point(field_set:object_detection.protos.KeepAspectRatioResizer.per_channel_pad_value)
}
inline void KeepAspectRatioResizer::_internal_add_per_channel_pad_value(float value) {
  per_channel_pad_value_.Add(value);
}
inline void KeepAspectRatioResizer::add_per_channel_pad_value(float value) {
  _internal_add_per_channel_pad_value(value);
  // @@protoc_insertion_point(field_add:object_detection.protos.KeepAspectRatioResizer.per_channel_pad_value)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
KeepAspectRatioResizer::_internal_per_channel_pad_value() const {
  return per_channel_pad_value_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
KeepAspectRatioResizer::per_channel_pad_value() const {
  // @@protoc_insertion_point(field_list:object_detection.protos.KeepAspectRatioResizer.per_channel_pad_value)
  return _internal_per_channel_pad_value();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
KeepAspectRatioResizer::_internal_mutable_per_channel_pad_value() {
  return &per_channel_pad_value_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
KeepAspectRatioResizer::mutable_per_channel_pad_value() {
  // @@protoc_insertion_point(field_mutable_list:object_detection.protos.KeepAspectRatioResizer.per_channel_pad_value)
  return _internal_mutable_per_channel_pad_value();
}

// -------------------------------------------------------------------

// FixedShapeResizer

// optional int32 height = 1 [default = 300];
inline bool FixedShapeResizer::_internal_has_height() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool FixedShapeResizer::has_height() const {
  return _internal_has_height();
}
inline void FixedShapeResizer::clear_height() {
  height_ = 300;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FixedShapeResizer::_internal_height() const {
  return height_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FixedShapeResizer::height() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.FixedShapeResizer.height)
  return _internal_height();
}
inline void FixedShapeResizer::_internal_set_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  height_ = value;
}
inline void FixedShapeResizer::set_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:object_detection.protos.FixedShapeResizer.height)
}

// optional int32 width = 2 [default = 300];
inline bool FixedShapeResizer::_internal_has_width() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool FixedShapeResizer::has_width() const {
  return _internal_has_width();
}
inline void FixedShapeResizer::clear_width() {
  width_ = 300;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FixedShapeResizer::_internal_width() const {
  return width_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FixedShapeResizer::width() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.FixedShapeResizer.width)
  return _internal_width();
}
inline void FixedShapeResizer::_internal_set_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  width_ = value;
}
inline void FixedShapeResizer::set_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:object_detection.protos.FixedShapeResizer.width)
}

// optional .object_detection.protos.ResizeType resize_method = 3 [default = BILINEAR];
inline bool FixedShapeResizer::_internal_has_resize_method() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FixedShapeResizer::has_resize_method() const {
  return _internal_has_resize_method();
}
inline void FixedShapeResizer::clear_resize_method() {
  resize_method_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::object_detection::protos::ResizeType FixedShapeResizer::_internal_resize_method() const {
  return static_cast< ::object_detection::protos::ResizeType >(resize_method_);
}
inline ::object_detection::protos::ResizeType FixedShapeResizer::resize_method() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.FixedShapeResizer.resize_method)
  return _internal_resize_method();
}
inline void FixedShapeResizer::_internal_set_resize_method(::object_detection::protos::ResizeType value) {
  assert(::object_detection::protos::ResizeType_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  resize_method_ = value;
}
inline void FixedShapeResizer::set_resize_method(::object_detection::protos::ResizeType value) {
  _internal_set_resize_method(value);
  // @@protoc_insertion_point(field_set:object_detection.protos.FixedShapeResizer.resize_method)
}

// optional bool convert_to_grayscale = 4 [default = false];
inline bool FixedShapeResizer::_internal_has_convert_to_grayscale() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool FixedShapeResizer::has_convert_to_grayscale() const {
  return _internal_has_convert_to_grayscale();
}
inline void FixedShapeResizer::clear_convert_to_grayscale() {
  convert_to_grayscale_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool FixedShapeResizer::_internal_convert_to_grayscale() const {
  return convert_to_grayscale_;
}
inline bool FixedShapeResizer::convert_to_grayscale() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.FixedShapeResizer.convert_to_grayscale)
  return _internal_convert_to_grayscale();
}
inline void FixedShapeResizer::_internal_set_convert_to_grayscale(bool value) {
  _has_bits_[0] |= 0x00000002u;
  convert_to_grayscale_ = value;
}
inline void FixedShapeResizer::set_convert_to_grayscale(bool value) {
  _internal_set_convert_to_grayscale(value);
  // @@protoc_insertion_point(field_set:object_detection.protos.FixedShapeResizer.convert_to_grayscale)
}

// -------------------------------------------------------------------

// ConditionalShapeResizer

// optional .object_detection.protos.ConditionalShapeResizer.ResizeCondition condition = 1 [default = GREATER];
inline bool ConditionalShapeResizer::_internal_has_condition() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ConditionalShapeResizer::has_condition() const {
  return _internal_has_condition();
}
inline void ConditionalShapeResizer::clear_condition() {
  condition_ = 1;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::object_detection::protos::ConditionalShapeResizer_ResizeCondition ConditionalShapeResizer::_internal_condition() const {
  return static_cast< ::object_detection::protos::ConditionalShapeResizer_ResizeCondition >(condition_);
}
inline ::object_detection::protos::ConditionalShapeResizer_ResizeCondition ConditionalShapeResizer::condition() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.ConditionalShapeResizer.condition)
  return _internal_condition();
}
inline void ConditionalShapeResizer::_internal_set_condition(::object_detection::protos::ConditionalShapeResizer_ResizeCondition value) {
  assert(::object_detection::protos::ConditionalShapeResizer_ResizeCondition_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  condition_ = value;
}
inline void ConditionalShapeResizer::set_condition(::object_detection::protos::ConditionalShapeResizer_ResizeCondition value) {
  _internal_set_condition(value);
  // @@protoc_insertion_point(field_set:object_detection.protos.ConditionalShapeResizer.condition)
}

// optional int32 size_threshold = 2 [default = 300];
inline bool ConditionalShapeResizer::_internal_has_size_threshold() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ConditionalShapeResizer::has_size_threshold() const {
  return _internal_has_size_threshold();
}
inline void ConditionalShapeResizer::clear_size_threshold() {
  size_threshold_ = 300;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ConditionalShapeResizer::_internal_size_threshold() const {
  return size_threshold_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ConditionalShapeResizer::size_threshold() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.ConditionalShapeResizer.size_threshold)
  return _internal_size_threshold();
}
inline void ConditionalShapeResizer::_internal_set_size_threshold(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  size_threshold_ = value;
}
inline void ConditionalShapeResizer::set_size_threshold(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_size_threshold(value);
  // @@protoc_insertion_point(field_set:object_detection.protos.ConditionalShapeResizer.size_threshold)
}

// optional .object_detection.protos.ResizeType resize_method = 3 [default = BILINEAR];
inline bool ConditionalShapeResizer::_internal_has_resize_method() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ConditionalShapeResizer::has_resize_method() const {
  return _internal_has_resize_method();
}
inline void ConditionalShapeResizer::clear_resize_method() {
  resize_method_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::object_detection::protos::ResizeType ConditionalShapeResizer::_internal_resize_method() const {
  return static_cast< ::object_detection::protos::ResizeType >(resize_method_);
}
inline ::object_detection::protos::ResizeType ConditionalShapeResizer::resize_method() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.ConditionalShapeResizer.resize_method)
  return _internal_resize_method();
}
inline void ConditionalShapeResizer::_internal_set_resize_method(::object_detection::protos::ResizeType value) {
  assert(::object_detection::protos::ResizeType_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  resize_method_ = value;
}
inline void ConditionalShapeResizer::set_resize_method(::object_detection::protos::ResizeType value) {
  _internal_set_resize_method(value);
  // @@protoc_insertion_point(field_set:object_detection.protos.ConditionalShapeResizer.resize_method)
}

// optional bool convert_to_grayscale = 4 [default = false];
inline bool ConditionalShapeResizer::_internal_has_convert_to_grayscale() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ConditionalShapeResizer::has_convert_to_grayscale() const {
  return _internal_has_convert_to_grayscale();
}
inline void ConditionalShapeResizer::clear_convert_to_grayscale() {
  convert_to_grayscale_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool ConditionalShapeResizer::_internal_convert_to_grayscale() const {
  return convert_to_grayscale_;
}
inline bool ConditionalShapeResizer::convert_to_grayscale() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.ConditionalShapeResizer.convert_to_grayscale)
  return _internal_convert_to_grayscale();
}
inline void ConditionalShapeResizer::_internal_set_convert_to_grayscale(bool value) {
  _has_bits_[0] |= 0x00000002u;
  convert_to_grayscale_ = value;
}
inline void ConditionalShapeResizer::set_convert_to_grayscale(bool value) {
  _internal_set_convert_to_grayscale(value);
  // @@protoc_insertion_point(field_set:object_detection.protos.ConditionalShapeResizer.convert_to_grayscale)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protos
}  // namespace object_detection

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::object_detection::protos::ConditionalShapeResizer_ResizeCondition> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::object_detection::protos::ConditionalShapeResizer_ResizeCondition>() {
  return ::object_detection::protos::ConditionalShapeResizer_ResizeCondition_descriptor();
}
template <> struct is_proto_enum< ::object_detection::protos::ResizeType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::object_detection::protos::ResizeType>() {
  return ::object_detection::protos::ResizeType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_object_5fdetection_2fprotos_2fimage_5fresizer_2eproto
